{"ast":null,"code":"import _classCallCheck from \"C:/Users/jasmi/where-do-you-vibe/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/jasmi/where-do-you-vibe/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nvar EPSILON = Math.pow(2, -52);\nvar EDGE_STACK = new Uint32Array(512);\n\nvar Delaunator = /*#__PURE__*/function () {\n  function Delaunator(coords) {\n    _classCallCheck(this, Delaunator);\n\n    var n = coords.length >> 1;\n    if (n > 0 && typeof coords[0] !== 'number') throw new Error('Expected coords to contain numbers.');\n    this.coords = coords; // arrays that will store the triangulation graph\n\n    var maxTriangles = Math.max(2 * n - 5, 0);\n    this._triangles = new Uint32Array(maxTriangles * 3);\n    this._halfedges = new Int32Array(maxTriangles * 3); // temporary arrays for tracking the edges of the advancing convex hull\n\n    this._hashSize = Math.ceil(Math.sqrt(n));\n    this._hullPrev = new Uint32Array(n); // edge to prev edge\n\n    this._hullNext = new Uint32Array(n); // edge to next edge\n\n    this._hullTri = new Uint32Array(n); // edge to adjacent triangle\n\n    this._hullHash = new Int32Array(this._hashSize).fill(-1); // angular edge hash\n    // temporary arrays for sorting points\n\n    this._ids = new Uint32Array(n);\n    this._dists = new Float64Array(n);\n    this.update();\n  }\n\n  _createClass(Delaunator, [{\n    key: \"update\",\n    value: function update() {\n      var coords = this.coords,\n          hullPrev = this._hullPrev,\n          hullNext = this._hullNext,\n          hullTri = this._hullTri,\n          hullHash = this._hullHash;\n      var n = coords.length >> 1; // populate an array of point indices; calculate input data bbox\n\n      var minX = Infinity;\n      var minY = Infinity;\n      var maxX = -Infinity;\n      var maxY = -Infinity;\n\n      for (var i = 0; i < n; i++) {\n        var x = coords[2 * i];\n        var y = coords[2 * i + 1];\n        if (x < minX) minX = x;\n        if (y < minY) minY = y;\n        if (x > maxX) maxX = x;\n        if (y > maxY) maxY = y;\n        this._ids[i] = i;\n      }\n\n      var cx = (minX + maxX) / 2;\n      var cy = (minY + maxY) / 2;\n      var minDist = Infinity;\n      var i0, i1, i2; // pick a seed point close to the center\n\n      for (var _i = 0; _i < n; _i++) {\n        var d = dist(cx, cy, coords[2 * _i], coords[2 * _i + 1]);\n\n        if (d < minDist) {\n          i0 = _i;\n          minDist = d;\n        }\n      }\n\n      var i0x = coords[2 * i0];\n      var i0y = coords[2 * i0 + 1];\n      minDist = Infinity; // find the point closest to the seed\n\n      for (var _i2 = 0; _i2 < n; _i2++) {\n        if (_i2 === i0) continue;\n\n        var _d = dist(i0x, i0y, coords[2 * _i2], coords[2 * _i2 + 1]);\n\n        if (_d < minDist && _d > 0) {\n          i1 = _i2;\n          minDist = _d;\n        }\n      }\n\n      var i1x = coords[2 * i1];\n      var i1y = coords[2 * i1 + 1];\n      var minRadius = Infinity; // find the third point which forms the smallest circumcircle with the first two\n\n      for (var _i3 = 0; _i3 < n; _i3++) {\n        if (_i3 === i0 || _i3 === i1) continue;\n        var r = circumradius(i0x, i0y, i1x, i1y, coords[2 * _i3], coords[2 * _i3 + 1]);\n\n        if (r < minRadius) {\n          i2 = _i3;\n          minRadius = r;\n        }\n      }\n\n      var i2x = coords[2 * i2];\n      var i2y = coords[2 * i2 + 1];\n\n      if (minRadius === Infinity) {\n        // order collinear points by dx (or dy if all x are identical)\n        // and return the list as a hull\n        for (var _i4 = 0; _i4 < n; _i4++) {\n          this._dists[_i4] = coords[2 * _i4] - coords[0] || coords[2 * _i4 + 1] - coords[1];\n        }\n\n        quicksort(this._ids, this._dists, 0, n - 1);\n        var hull = new Uint32Array(n);\n        var j = 0;\n\n        for (var _i5 = 0, d0 = -Infinity; _i5 < n; _i5++) {\n          var id = this._ids[_i5];\n\n          if (this._dists[id] > d0) {\n            hull[j++] = id;\n            d0 = this._dists[id];\n          }\n        }\n\n        this.hull = hull.subarray(0, j);\n        this.triangles = new Uint32Array(0);\n        this.halfedges = new Uint32Array(0);\n        return;\n      } // swap the order of the seed points for counter-clockwise orientation\n\n\n      if (orient(i0x, i0y, i1x, i1y, i2x, i2y)) {\n        var _i6 = i1;\n        var _x = i1x;\n        var _y = i1y;\n        i1 = i2;\n        i1x = i2x;\n        i1y = i2y;\n        i2 = _i6;\n        i2x = _x;\n        i2y = _y;\n      }\n\n      var center = circumcenter(i0x, i0y, i1x, i1y, i2x, i2y);\n      this._cx = center.x;\n      this._cy = center.y;\n\n      for (var _i7 = 0; _i7 < n; _i7++) {\n        this._dists[_i7] = dist(coords[2 * _i7], coords[2 * _i7 + 1], center.x, center.y);\n      } // sort the points by distance from the seed triangle circumcenter\n\n\n      quicksort(this._ids, this._dists, 0, n - 1); // set up the seed triangle as the starting hull\n\n      this._hullStart = i0;\n      var hullSize = 3;\n      hullNext[i0] = hullPrev[i2] = i1;\n      hullNext[i1] = hullPrev[i0] = i2;\n      hullNext[i2] = hullPrev[i1] = i0;\n      hullTri[i0] = 0;\n      hullTri[i1] = 1;\n      hullTri[i2] = 2;\n      hullHash.fill(-1);\n      hullHash[this._hashKey(i0x, i0y)] = i0;\n      hullHash[this._hashKey(i1x, i1y)] = i1;\n      hullHash[this._hashKey(i2x, i2y)] = i2;\n      this.trianglesLen = 0;\n\n      this._addTriangle(i0, i1, i2, -1, -1, -1);\n\n      for (var k = 0, xp, yp; k < this._ids.length; k++) {\n        var _i8 = this._ids[k];\n        var _x2 = coords[2 * _i8];\n        var _y2 = coords[2 * _i8 + 1]; // skip near-duplicate points\n\n        if (k > 0 && Math.abs(_x2 - xp) <= EPSILON && Math.abs(_y2 - yp) <= EPSILON) continue;\n        xp = _x2;\n        yp = _y2; // skip seed triangle points\n\n        if (_i8 === i0 || _i8 === i1 || _i8 === i2) continue; // find a visible edge on the convex hull using edge hash\n\n        var start = 0;\n\n        for (var _j = 0, key = this._hashKey(_x2, _y2); _j < this._hashSize; _j++) {\n          start = hullHash[(key + _j) % this._hashSize];\n          if (start !== -1 && start !== hullNext[start]) break;\n        }\n\n        start = hullPrev[start];\n        var e = start,\n            q = void 0;\n\n        while (q = hullNext[e], !orient(_x2, _y2, coords[2 * e], coords[2 * e + 1], coords[2 * q], coords[2 * q + 1])) {\n          e = q;\n\n          if (e === start) {\n            e = -1;\n            break;\n          }\n        }\n\n        if (e === -1) continue; // likely a near-duplicate point; skip it\n        // add the first triangle from the point\n\n        var t = this._addTriangle(e, _i8, hullNext[e], -1, -1, hullTri[e]); // recursively flip triangles from the point until they satisfy the Delaunay condition\n\n\n        hullTri[_i8] = this._legalize(t + 2);\n        hullTri[e] = t; // keep track of boundary triangles on the hull\n\n        hullSize++; // walk forward through the hull, adding more triangles and flipping recursively\n\n        var _n = hullNext[e];\n\n        while (q = hullNext[_n], orient(_x2, _y2, coords[2 * _n], coords[2 * _n + 1], coords[2 * q], coords[2 * q + 1])) {\n          t = this._addTriangle(_n, _i8, q, hullTri[_i8], -1, hullTri[_n]);\n          hullTri[_i8] = this._legalize(t + 2);\n          hullNext[_n] = _n; // mark as removed\n\n          hullSize--;\n          _n = q;\n        } // walk backward from the other side, adding more triangles and flipping\n\n\n        if (e === start) {\n          while (q = hullPrev[e], orient(_x2, _y2, coords[2 * q], coords[2 * q + 1], coords[2 * e], coords[2 * e + 1])) {\n            t = this._addTriangle(q, _i8, e, -1, hullTri[e], hullTri[q]);\n\n            this._legalize(t + 2);\n\n            hullTri[q] = t;\n            hullNext[e] = e; // mark as removed\n\n            hullSize--;\n            e = q;\n          }\n        } // update the hull indices\n\n\n        this._hullStart = hullPrev[_i8] = e;\n        hullNext[e] = hullPrev[_n] = _i8;\n        hullNext[_i8] = _n; // save the two new edges in the hash table\n\n        hullHash[this._hashKey(_x2, _y2)] = _i8;\n        hullHash[this._hashKey(coords[2 * e], coords[2 * e + 1])] = e;\n      }\n\n      this.hull = new Uint32Array(hullSize);\n\n      for (var _i9 = 0, _e = this._hullStart; _i9 < hullSize; _i9++) {\n        this.hull[_i9] = _e;\n        _e = hullNext[_e];\n      } // trim typed triangle mesh arrays\n\n\n      this.triangles = this._triangles.subarray(0, this.trianglesLen);\n      this.halfedges = this._halfedges.subarray(0, this.trianglesLen);\n    }\n  }, {\n    key: \"_hashKey\",\n    value: function _hashKey(x, y) {\n      return Math.floor(pseudoAngle(x - this._cx, y - this._cy) * this._hashSize) % this._hashSize;\n    }\n  }, {\n    key: \"_legalize\",\n    value: function _legalize(a) {\n      var triangles = this._triangles,\n          halfedges = this._halfedges,\n          coords = this.coords;\n      var i = 0;\n      var ar = 0; // recursion eliminated with a fixed-size stack\n\n      while (true) {\n        var b = halfedges[a];\n        /* if the pair of triangles doesn't satisfy the Delaunay condition\n         * (p1 is inside the circumcircle of [p0, pl, pr]), flip them,\n         * then do the same check/flip recursively for the new pair of triangles\n         *\n         *           pl                    pl\n         *          /||\\                  /  \\\n         *       al/ || \\bl            al/    \\a\n         *        /  ||  \\              /      \\\n         *       /  a||b  \\    flip    /___ar___\\\n         *     p0\\   ||   /p1   =>   p0\\---bl---/p1\n         *        \\  ||  /              \\      /\n         *       ar\\ || /br             b\\    /br\n         *          \\||/                  \\  /\n         *           pr                    pr\n         */\n\n        var a0 = a - a % 3;\n        ar = a0 + (a + 2) % 3;\n\n        if (b === -1) {\n          // convex hull edge\n          if (i === 0) break;\n          a = EDGE_STACK[--i];\n          continue;\n        }\n\n        var b0 = b - b % 3;\n        var al = a0 + (a + 1) % 3;\n        var bl = b0 + (b + 2) % 3;\n        var p0 = triangles[ar];\n        var pr = triangles[a];\n        var pl = triangles[al];\n        var p1 = triangles[bl];\n        var illegal = inCircle(coords[2 * p0], coords[2 * p0 + 1], coords[2 * pr], coords[2 * pr + 1], coords[2 * pl], coords[2 * pl + 1], coords[2 * p1], coords[2 * p1 + 1]);\n\n        if (illegal) {\n          triangles[a] = p1;\n          triangles[b] = p0;\n          var hbl = halfedges[bl]; // edge swapped on the other side of the hull (rare); fix the halfedge reference\n\n          if (hbl === -1) {\n            var e = this._hullStart;\n\n            do {\n              if (this._hullTri[e] === bl) {\n                this._hullTri[e] = a;\n                break;\n              }\n\n              e = this._hullPrev[e];\n            } while (e !== this._hullStart);\n          }\n\n          this._link(a, hbl);\n\n          this._link(b, halfedges[ar]);\n\n          this._link(ar, bl);\n\n          var br = b0 + (b + 1) % 3; // don't worry about hitting the cap: it can only happen on extremely degenerate input\n\n          if (i < EDGE_STACK.length) {\n            EDGE_STACK[i++] = br;\n          }\n        } else {\n          if (i === 0) break;\n          a = EDGE_STACK[--i];\n        }\n      }\n\n      return ar;\n    }\n  }, {\n    key: \"_link\",\n    value: function _link(a, b) {\n      this._halfedges[a] = b;\n      if (b !== -1) this._halfedges[b] = a;\n    } // add a new triangle given vertex indices and adjacent half-edge ids\n\n  }, {\n    key: \"_addTriangle\",\n    value: function _addTriangle(i0, i1, i2, a, b, c) {\n      var t = this.trianglesLen;\n      this._triangles[t] = i0;\n      this._triangles[t + 1] = i1;\n      this._triangles[t + 2] = i2;\n\n      this._link(t, a);\n\n      this._link(t + 1, b);\n\n      this._link(t + 2, c);\n\n      this.trianglesLen += 3;\n      return t;\n    }\n  }], [{\n    key: \"from\",\n    value: function from(points) {\n      var getX = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultGetX;\n      var getY = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultGetY;\n      var n = points.length;\n      var coords = new Float64Array(n * 2);\n\n      for (var i = 0; i < n; i++) {\n        var p = points[i];\n        coords[2 * i] = getX(p);\n        coords[2 * i + 1] = getY(p);\n      }\n\n      return new Delaunator(coords);\n    }\n  }]);\n\n  return Delaunator;\n}(); // monotonically increases with real angle, but doesn't need expensive trigonometry\n\n\nexport { Delaunator as default };\n\nfunction pseudoAngle(dx, dy) {\n  var p = dx / (Math.abs(dx) + Math.abs(dy));\n  return (dy > 0 ? 3 - p : 1 + p) / 4; // [0..1]\n}\n\nfunction dist(ax, ay, bx, by) {\n  var dx = ax - bx;\n  var dy = ay - by;\n  return dx * dx + dy * dy;\n} // return 2d orientation sign if we're confident in it through J. Shewchuk's error bound check\n\n\nfunction orientIfSure(px, py, rx, ry, qx, qy) {\n  var l = (ry - py) * (qx - px);\n  var r = (rx - px) * (qy - py);\n  return Math.abs(l - r) >= 3.3306690738754716e-16 * Math.abs(l + r) ? l - r : 0;\n} // a more robust orientation test that's stable in a given triangle (to fix robustness issues)\n\n\nfunction orient(rx, ry, qx, qy, px, py) {\n  var sign = orientIfSure(px, py, rx, ry, qx, qy) || orientIfSure(rx, ry, qx, qy, px, py) || orientIfSure(qx, qy, px, py, rx, ry);\n  return sign < 0;\n}\n\nfunction inCircle(ax, ay, bx, by, cx, cy, px, py) {\n  var dx = ax - px;\n  var dy = ay - py;\n  var ex = bx - px;\n  var ey = by - py;\n  var fx = cx - px;\n  var fy = cy - py;\n  var ap = dx * dx + dy * dy;\n  var bp = ex * ex + ey * ey;\n  var cp = fx * fx + fy * fy;\n  return dx * (ey * cp - bp * fy) - dy * (ex * cp - bp * fx) + ap * (ex * fy - ey * fx) < 0;\n}\n\nfunction circumradius(ax, ay, bx, by, cx, cy) {\n  var dx = bx - ax;\n  var dy = by - ay;\n  var ex = cx - ax;\n  var ey = cy - ay;\n  var bl = dx * dx + dy * dy;\n  var cl = ex * ex + ey * ey;\n  var d = 0.5 / (dx * ey - dy * ex);\n  var x = (ey * bl - dy * cl) * d;\n  var y = (dx * cl - ex * bl) * d;\n  return x * x + y * y;\n}\n\nfunction circumcenter(ax, ay, bx, by, cx, cy) {\n  var dx = bx - ax;\n  var dy = by - ay;\n  var ex = cx - ax;\n  var ey = cy - ay;\n  var bl = dx * dx + dy * dy;\n  var cl = ex * ex + ey * ey;\n  var d = 0.5 / (dx * ey - dy * ex);\n  var x = ax + (ey * bl - dy * cl) * d;\n  var y = ay + (dx * cl - ex * bl) * d;\n  return {\n    x: x,\n    y: y\n  };\n}\n\nfunction quicksort(ids, dists, left, right) {\n  if (right - left <= 20) {\n    for (var i = left + 1; i <= right; i++) {\n      var temp = ids[i];\n      var tempDist = dists[temp];\n      var j = i - 1;\n\n      while (j >= left && dists[ids[j]] > tempDist) {\n        ids[j + 1] = ids[j--];\n      }\n\n      ids[j + 1] = temp;\n    }\n  } else {\n    var median = left + right >> 1;\n\n    var _i10 = left + 1;\n\n    var _j2 = right;\n    swap(ids, median, _i10);\n    if (dists[ids[left]] > dists[ids[right]]) swap(ids, left, right);\n    if (dists[ids[_i10]] > dists[ids[right]]) swap(ids, _i10, right);\n    if (dists[ids[left]] > dists[ids[_i10]]) swap(ids, left, _i10);\n    var _temp = ids[_i10];\n    var _tempDist = dists[_temp];\n\n    while (true) {\n      do {\n        _i10++;\n      } while (dists[ids[_i10]] < _tempDist);\n\n      do {\n        _j2--;\n      } while (dists[ids[_j2]] > _tempDist);\n\n      if (_j2 < _i10) break;\n      swap(ids, _i10, _j2);\n    }\n\n    ids[left + 1] = ids[_j2];\n    ids[_j2] = _temp;\n\n    if (right - _i10 + 1 >= _j2 - left) {\n      quicksort(ids, dists, _i10, right);\n      quicksort(ids, dists, left, _j2 - 1);\n    } else {\n      quicksort(ids, dists, left, _j2 - 1);\n      quicksort(ids, dists, _i10, right);\n    }\n  }\n}\n\nfunction swap(arr, i, j) {\n  var tmp = arr[i];\n  arr[i] = arr[j];\n  arr[j] = tmp;\n}\n\nfunction defaultGetX(p) {\n  return p[0];\n}\n\nfunction defaultGetY(p) {\n  return p[1];\n}","map":{"version":3,"sources":["C:/Users/jasmi/where-do-you-vibe/client/node_modules/delaunator/index.js"],"names":["EPSILON","Math","pow","EDGE_STACK","Uint32Array","Delaunator","coords","n","length","Error","maxTriangles","max","_triangles","_halfedges","Int32Array","_hashSize","ceil","sqrt","_hullPrev","_hullNext","_hullTri","_hullHash","fill","_ids","_dists","Float64Array","update","hullPrev","hullNext","hullTri","hullHash","minX","Infinity","minY","maxX","maxY","i","x","y","cx","cy","minDist","i0","i1","i2","d","dist","i0x","i0y","i1x","i1y","minRadius","r","circumradius","i2x","i2y","quicksort","hull","j","d0","id","subarray","triangles","halfedges","orient","center","circumcenter","_cx","_cy","_hullStart","hullSize","_hashKey","trianglesLen","_addTriangle","k","xp","yp","abs","start","key","e","q","t","_legalize","floor","pseudoAngle","a","ar","b","a0","b0","al","bl","p0","pr","pl","p1","illegal","inCircle","hbl","_link","br","c","points","getX","defaultGetX","getY","defaultGetY","p","dx","dy","ax","ay","bx","by","orientIfSure","px","py","rx","ry","qx","qy","l","sign","ex","ey","fx","fy","ap","bp","cp","cl","ids","dists","left","right","temp","tempDist","median","swap","arr","tmp"],"mappings":";;AACA,IAAMA,OAAO,GAAGC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAY,CAAC,EAAb,CAAhB;AACA,IAAMC,UAAU,GAAG,IAAIC,WAAJ,CAAgB,GAAhB,CAAnB;;IAEqBC,U;AAejB,sBAAYC,MAAZ,EAAoB;AAAA;;AAChB,QAAMC,CAAC,GAAGD,MAAM,CAACE,MAAP,IAAiB,CAA3B;AACA,QAAID,CAAC,GAAG,CAAJ,IAAS,OAAOD,MAAM,CAAC,CAAD,CAAb,KAAqB,QAAlC,EAA4C,MAAM,IAAIG,KAAJ,CAAU,qCAAV,CAAN;AAE5C,SAAKH,MAAL,GAAcA,MAAd,CAJgB,CAMhB;;AACA,QAAMI,YAAY,GAAGT,IAAI,CAACU,GAAL,CAAS,IAAIJ,CAAJ,GAAQ,CAAjB,EAAoB,CAApB,CAArB;AACA,SAAKK,UAAL,GAAkB,IAAIR,WAAJ,CAAgBM,YAAY,GAAG,CAA/B,CAAlB;AACA,SAAKG,UAAL,GAAkB,IAAIC,UAAJ,CAAeJ,YAAY,GAAG,CAA9B,CAAlB,CATgB,CAWhB;;AACA,SAAKK,SAAL,GAAiBd,IAAI,CAACe,IAAL,CAAUf,IAAI,CAACgB,IAAL,CAAUV,CAAV,CAAV,CAAjB;AACA,SAAKW,SAAL,GAAiB,IAAId,WAAJ,CAAgBG,CAAhB,CAAjB,CAbgB,CAaqB;;AACrC,SAAKY,SAAL,GAAiB,IAAIf,WAAJ,CAAgBG,CAAhB,CAAjB,CAdgB,CAcqB;;AACrC,SAAKa,QAAL,GAAgB,IAAIhB,WAAJ,CAAgBG,CAAhB,CAAhB,CAfgB,CAeoB;;AACpC,SAAKc,SAAL,GAAiB,IAAIP,UAAJ,CAAe,KAAKC,SAApB,EAA+BO,IAA/B,CAAoC,CAAC,CAArC,CAAjB,CAhBgB,CAgB0C;AAE1D;;AACA,SAAKC,IAAL,GAAY,IAAInB,WAAJ,CAAgBG,CAAhB,CAAZ;AACA,SAAKiB,MAAL,GAAc,IAAIC,YAAJ,CAAiBlB,CAAjB,CAAd;AAEA,SAAKmB,MAAL;AACH;;;;WAED,kBAAS;AAAA,UACEpB,MADF,GAC+F,IAD/F,CACEA,MADF;AAAA,UACqBqB,QADrB,GAC+F,IAD/F,CACUT,SADV;AAAA,UAC0CU,QAD1C,GAC+F,IAD/F,CAC+BT,SAD/B;AAAA,UAC8DU,OAD9D,GAC+F,IAD/F,CACoDT,QADpD;AAAA,UACkFU,QADlF,GAC+F,IAD/F,CACuET,SADvE;AAEL,UAAMd,CAAC,GAAGD,MAAM,CAACE,MAAP,IAAiB,CAA3B,CAFK,CAIL;;AACA,UAAIuB,IAAI,GAAGC,QAAX;AACA,UAAIC,IAAI,GAAGD,QAAX;AACA,UAAIE,IAAI,GAAG,CAACF,QAAZ;AACA,UAAIG,IAAI,GAAG,CAACH,QAAZ;;AAEA,WAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG7B,CAApB,EAAuB6B,CAAC,EAAxB,EAA4B;AACxB,YAAMC,CAAC,GAAG/B,MAAM,CAAC,IAAI8B,CAAL,CAAhB;AACA,YAAME,CAAC,GAAGhC,MAAM,CAAC,IAAI8B,CAAJ,GAAQ,CAAT,CAAhB;AACA,YAAIC,CAAC,GAAGN,IAAR,EAAcA,IAAI,GAAGM,CAAP;AACd,YAAIC,CAAC,GAAGL,IAAR,EAAcA,IAAI,GAAGK,CAAP;AACd,YAAID,CAAC,GAAGH,IAAR,EAAcA,IAAI,GAAGG,CAAP;AACd,YAAIC,CAAC,GAAGH,IAAR,EAAcA,IAAI,GAAGG,CAAP;AACd,aAAKf,IAAL,CAAUa,CAAV,IAAeA,CAAf;AACH;;AACD,UAAMG,EAAE,GAAG,CAACR,IAAI,GAAGG,IAAR,IAAgB,CAA3B;AACA,UAAMM,EAAE,GAAG,CAACP,IAAI,GAAGE,IAAR,IAAgB,CAA3B;AAEA,UAAIM,OAAO,GAAGT,QAAd;AACA,UAAIU,EAAJ,EAAQC,EAAR,EAAYC,EAAZ,CAvBK,CAyBL;;AACA,WAAK,IAAIR,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAG7B,CAApB,EAAuB6B,EAAC,EAAxB,EAA4B;AACxB,YAAMS,CAAC,GAAGC,IAAI,CAACP,EAAD,EAAKC,EAAL,EAASlC,MAAM,CAAC,IAAI8B,EAAL,CAAf,EAAwB9B,MAAM,CAAC,IAAI8B,EAAJ,GAAQ,CAAT,CAA9B,CAAd;;AACA,YAAIS,CAAC,GAAGJ,OAAR,EAAiB;AACbC,UAAAA,EAAE,GAAGN,EAAL;AACAK,UAAAA,OAAO,GAAGI,CAAV;AACH;AACJ;;AACD,UAAME,GAAG,GAAGzC,MAAM,CAAC,IAAIoC,EAAL,CAAlB;AACA,UAAMM,GAAG,GAAG1C,MAAM,CAAC,IAAIoC,EAAJ,GAAS,CAAV,CAAlB;AAEAD,MAAAA,OAAO,GAAGT,QAAV,CApCK,CAsCL;;AACA,WAAK,IAAII,GAAC,GAAG,CAAb,EAAgBA,GAAC,GAAG7B,CAApB,EAAuB6B,GAAC,EAAxB,EAA4B;AACxB,YAAIA,GAAC,KAAKM,EAAV,EAAc;;AACd,YAAMG,EAAC,GAAGC,IAAI,CAACC,GAAD,EAAMC,GAAN,EAAW1C,MAAM,CAAC,IAAI8B,GAAL,CAAjB,EAA0B9B,MAAM,CAAC,IAAI8B,GAAJ,GAAQ,CAAT,CAAhC,CAAd;;AACA,YAAIS,EAAC,GAAGJ,OAAJ,IAAeI,EAAC,GAAG,CAAvB,EAA0B;AACtBF,UAAAA,EAAE,GAAGP,GAAL;AACAK,UAAAA,OAAO,GAAGI,EAAV;AACH;AACJ;;AACD,UAAII,GAAG,GAAG3C,MAAM,CAAC,IAAIqC,EAAL,CAAhB;AACA,UAAIO,GAAG,GAAG5C,MAAM,CAAC,IAAIqC,EAAJ,GAAS,CAAV,CAAhB;AAEA,UAAIQ,SAAS,GAAGnB,QAAhB,CAlDK,CAoDL;;AACA,WAAK,IAAII,GAAC,GAAG,CAAb,EAAgBA,GAAC,GAAG7B,CAApB,EAAuB6B,GAAC,EAAxB,EAA4B;AACxB,YAAIA,GAAC,KAAKM,EAAN,IAAYN,GAAC,KAAKO,EAAtB,EAA0B;AAC1B,YAAMS,CAAC,GAAGC,YAAY,CAACN,GAAD,EAAMC,GAAN,EAAWC,GAAX,EAAgBC,GAAhB,EAAqB5C,MAAM,CAAC,IAAI8B,GAAL,CAA3B,EAAoC9B,MAAM,CAAC,IAAI8B,GAAJ,GAAQ,CAAT,CAA1C,CAAtB;;AACA,YAAIgB,CAAC,GAAGD,SAAR,EAAmB;AACfP,UAAAA,EAAE,GAAGR,GAAL;AACAe,UAAAA,SAAS,GAAGC,CAAZ;AACH;AACJ;;AACD,UAAIE,GAAG,GAAGhD,MAAM,CAAC,IAAIsC,EAAL,CAAhB;AACA,UAAIW,GAAG,GAAGjD,MAAM,CAAC,IAAIsC,EAAJ,GAAS,CAAV,CAAhB;;AAEA,UAAIO,SAAS,KAAKnB,QAAlB,EAA4B;AACxB;AACA;AACA,aAAK,IAAII,GAAC,GAAG,CAAb,EAAgBA,GAAC,GAAG7B,CAApB,EAAuB6B,GAAC,EAAxB,EAA4B;AACxB,eAAKZ,MAAL,CAAYY,GAAZ,IAAkB9B,MAAM,CAAC,IAAI8B,GAAL,CAAN,GAAgB9B,MAAM,CAAC,CAAD,CAAvB,IAAgCA,MAAM,CAAC,IAAI8B,GAAJ,GAAQ,CAAT,CAAN,GAAoB9B,MAAM,CAAC,CAAD,CAA3E;AACH;;AACDkD,QAAAA,SAAS,CAAC,KAAKjC,IAAN,EAAY,KAAKC,MAAjB,EAAyB,CAAzB,EAA4BjB,CAAC,GAAG,CAAhC,CAAT;AACA,YAAMkD,IAAI,GAAG,IAAIrD,WAAJ,CAAgBG,CAAhB,CAAb;AACA,YAAImD,CAAC,GAAG,CAAR;;AACA,aAAK,IAAItB,GAAC,GAAG,CAAR,EAAWuB,EAAE,GAAG,CAAC3B,QAAtB,EAAgCI,GAAC,GAAG7B,CAApC,EAAuC6B,GAAC,EAAxC,EAA4C;AACxC,cAAMwB,EAAE,GAAG,KAAKrC,IAAL,CAAUa,GAAV,CAAX;;AACA,cAAI,KAAKZ,MAAL,CAAYoC,EAAZ,IAAkBD,EAAtB,EAA0B;AACtBF,YAAAA,IAAI,CAACC,CAAC,EAAF,CAAJ,GAAYE,EAAZ;AACAD,YAAAA,EAAE,GAAG,KAAKnC,MAAL,CAAYoC,EAAZ,CAAL;AACH;AACJ;;AACD,aAAKH,IAAL,GAAYA,IAAI,CAACI,QAAL,CAAc,CAAd,EAAiBH,CAAjB,CAAZ;AACA,aAAKI,SAAL,GAAiB,IAAI1D,WAAJ,CAAgB,CAAhB,CAAjB;AACA,aAAK2D,SAAL,GAAiB,IAAI3D,WAAJ,CAAgB,CAAhB,CAAjB;AACA;AACH,OApFI,CAsFL;;;AACA,UAAI4D,MAAM,CAACjB,GAAD,EAAMC,GAAN,EAAWC,GAAX,EAAgBC,GAAhB,EAAqBI,GAArB,EAA0BC,GAA1B,CAAV,EAA0C;AACtC,YAAMnB,GAAC,GAAGO,EAAV;AACA,YAAMN,EAAC,GAAGY,GAAV;AACA,YAAMX,EAAC,GAAGY,GAAV;AACAP,QAAAA,EAAE,GAAGC,EAAL;AACAK,QAAAA,GAAG,GAAGK,GAAN;AACAJ,QAAAA,GAAG,GAAGK,GAAN;AACAX,QAAAA,EAAE,GAAGR,GAAL;AACAkB,QAAAA,GAAG,GAAGjB,EAAN;AACAkB,QAAAA,GAAG,GAAGjB,EAAN;AACH;;AAED,UAAM2B,MAAM,GAAGC,YAAY,CAACnB,GAAD,EAAMC,GAAN,EAAWC,GAAX,EAAgBC,GAAhB,EAAqBI,GAArB,EAA0BC,GAA1B,CAA3B;AACA,WAAKY,GAAL,GAAWF,MAAM,CAAC5B,CAAlB;AACA,WAAK+B,GAAL,GAAWH,MAAM,CAAC3B,CAAlB;;AAEA,WAAK,IAAIF,GAAC,GAAG,CAAb,EAAgBA,GAAC,GAAG7B,CAApB,EAAuB6B,GAAC,EAAxB,EAA4B;AACxB,aAAKZ,MAAL,CAAYY,GAAZ,IAAiBU,IAAI,CAACxC,MAAM,CAAC,IAAI8B,GAAL,CAAP,EAAgB9B,MAAM,CAAC,IAAI8B,GAAJ,GAAQ,CAAT,CAAtB,EAAmC6B,MAAM,CAAC5B,CAA1C,EAA6C4B,MAAM,CAAC3B,CAApD,CAArB;AACH,OAzGI,CA2GL;;;AACAkB,MAAAA,SAAS,CAAC,KAAKjC,IAAN,EAAY,KAAKC,MAAjB,EAAyB,CAAzB,EAA4BjB,CAAC,GAAG,CAAhC,CAAT,CA5GK,CA8GL;;AACA,WAAK8D,UAAL,GAAkB3B,EAAlB;AACA,UAAI4B,QAAQ,GAAG,CAAf;AAEA1C,MAAAA,QAAQ,CAACc,EAAD,CAAR,GAAef,QAAQ,CAACiB,EAAD,CAAR,GAAeD,EAA9B;AACAf,MAAAA,QAAQ,CAACe,EAAD,CAAR,GAAehB,QAAQ,CAACe,EAAD,CAAR,GAAeE,EAA9B;AACAhB,MAAAA,QAAQ,CAACgB,EAAD,CAAR,GAAejB,QAAQ,CAACgB,EAAD,CAAR,GAAeD,EAA9B;AAEAb,MAAAA,OAAO,CAACa,EAAD,CAAP,GAAc,CAAd;AACAb,MAAAA,OAAO,CAACc,EAAD,CAAP,GAAc,CAAd;AACAd,MAAAA,OAAO,CAACe,EAAD,CAAP,GAAc,CAAd;AAEAd,MAAAA,QAAQ,CAACR,IAAT,CAAc,CAAC,CAAf;AACAQ,MAAAA,QAAQ,CAAC,KAAKyC,QAAL,CAAcxB,GAAd,EAAmBC,GAAnB,CAAD,CAAR,GAAoCN,EAApC;AACAZ,MAAAA,QAAQ,CAAC,KAAKyC,QAAL,CAActB,GAAd,EAAmBC,GAAnB,CAAD,CAAR,GAAoCP,EAApC;AACAb,MAAAA,QAAQ,CAAC,KAAKyC,QAAL,CAAcjB,GAAd,EAAmBC,GAAnB,CAAD,CAAR,GAAoCX,EAApC;AAEA,WAAK4B,YAAL,GAAoB,CAApB;;AACA,WAAKC,YAAL,CAAkB/B,EAAlB,EAAsBC,EAAtB,EAA0BC,EAA1B,EAA8B,CAAC,CAA/B,EAAkC,CAAC,CAAnC,EAAsC,CAAC,CAAvC;;AAEA,WAAK,IAAI8B,CAAC,GAAG,CAAR,EAAWC,EAAX,EAAeC,EAApB,EAAwBF,CAAC,GAAG,KAAKnD,IAAL,CAAUf,MAAtC,EAA8CkE,CAAC,EAA/C,EAAmD;AAC/C,YAAMtC,GAAC,GAAG,KAAKb,IAAL,CAAUmD,CAAV,CAAV;AACA,YAAMrC,GAAC,GAAG/B,MAAM,CAAC,IAAI8B,GAAL,CAAhB;AACA,YAAME,GAAC,GAAGhC,MAAM,CAAC,IAAI8B,GAAJ,GAAQ,CAAT,CAAhB,CAH+C,CAK/C;;AACA,YAAIsC,CAAC,GAAG,CAAJ,IAASzE,IAAI,CAAC4E,GAAL,CAASxC,GAAC,GAAGsC,EAAb,KAAoB3E,OAA7B,IAAwCC,IAAI,CAAC4E,GAAL,CAASvC,GAAC,GAAGsC,EAAb,KAAoB5E,OAAhE,EAAyE;AACzE2E,QAAAA,EAAE,GAAGtC,GAAL;AACAuC,QAAAA,EAAE,GAAGtC,GAAL,CAR+C,CAU/C;;AACA,YAAIF,GAAC,KAAKM,EAAN,IAAYN,GAAC,KAAKO,EAAlB,IAAwBP,GAAC,KAAKQ,EAAlC,EAAsC,SAXS,CAa/C;;AACA,YAAIkC,KAAK,GAAG,CAAZ;;AACA,aAAK,IAAIpB,EAAC,GAAG,CAAR,EAAWqB,GAAG,GAAG,KAAKR,QAAL,CAAclC,GAAd,EAAiBC,GAAjB,CAAtB,EAA2CoB,EAAC,GAAG,KAAK3C,SAApD,EAA+D2C,EAAC,EAAhE,EAAoE;AAChEoB,UAAAA,KAAK,GAAGhD,QAAQ,CAAC,CAACiD,GAAG,GAAGrB,EAAP,IAAY,KAAK3C,SAAlB,CAAhB;AACA,cAAI+D,KAAK,KAAK,CAAC,CAAX,IAAgBA,KAAK,KAAKlD,QAAQ,CAACkD,KAAD,CAAtC,EAA+C;AAClD;;AAEDA,QAAAA,KAAK,GAAGnD,QAAQ,CAACmD,KAAD,CAAhB;AACA,YAAIE,CAAC,GAAGF,KAAR;AAAA,YAAeG,CAAC,SAAhB;;AACA,eAAOA,CAAC,GAAGrD,QAAQ,CAACoD,CAAD,CAAZ,EAAiB,CAAChB,MAAM,CAAC3B,GAAD,EAAIC,GAAJ,EAAOhC,MAAM,CAAC,IAAI0E,CAAL,CAAb,EAAsB1E,MAAM,CAAC,IAAI0E,CAAJ,GAAQ,CAAT,CAA5B,EAAyC1E,MAAM,CAAC,IAAI2E,CAAL,CAA/C,EAAwD3E,MAAM,CAAC,IAAI2E,CAAJ,GAAQ,CAAT,CAA9D,CAA/B,EAA2G;AACvGD,UAAAA,CAAC,GAAGC,CAAJ;;AACA,cAAID,CAAC,KAAKF,KAAV,EAAiB;AACbE,YAAAA,CAAC,GAAG,CAAC,CAAL;AACA;AACH;AACJ;;AACD,YAAIA,CAAC,KAAK,CAAC,CAAX,EAAc,SA7BiC,CA6BvB;AAExB;;AACA,YAAIE,CAAC,GAAG,KAAKT,YAAL,CAAkBO,CAAlB,EAAqB5C,GAArB,EAAwBR,QAAQ,CAACoD,CAAD,CAAhC,EAAqC,CAAC,CAAtC,EAAyC,CAAC,CAA1C,EAA6CnD,OAAO,CAACmD,CAAD,CAApD,CAAR,CAhC+C,CAkC/C;;;AACAnD,QAAAA,OAAO,CAACO,GAAD,CAAP,GAAa,KAAK+C,SAAL,CAAeD,CAAC,GAAG,CAAnB,CAAb;AACArD,QAAAA,OAAO,CAACmD,CAAD,CAAP,GAAaE,CAAb,CApC+C,CAoC/B;;AAChBZ,QAAAA,QAAQ,GArCuC,CAuC/C;;AACA,YAAI/D,EAAC,GAAGqB,QAAQ,CAACoD,CAAD,CAAhB;;AACA,eAAOC,CAAC,GAAGrD,QAAQ,CAACrB,EAAD,CAAZ,EAAiByD,MAAM,CAAC3B,GAAD,EAAIC,GAAJ,EAAOhC,MAAM,CAAC,IAAIC,EAAL,CAAb,EAAsBD,MAAM,CAAC,IAAIC,EAAJ,GAAQ,CAAT,CAA5B,EAAyCD,MAAM,CAAC,IAAI2E,CAAL,CAA/C,EAAwD3E,MAAM,CAAC,IAAI2E,CAAJ,GAAQ,CAAT,CAA9D,CAA9B,EAA0G;AACtGC,UAAAA,CAAC,GAAG,KAAKT,YAAL,CAAkBlE,EAAlB,EAAqB6B,GAArB,EAAwB6C,CAAxB,EAA2BpD,OAAO,CAACO,GAAD,CAAlC,EAAuC,CAAC,CAAxC,EAA2CP,OAAO,CAACtB,EAAD,CAAlD,CAAJ;AACAsB,UAAAA,OAAO,CAACO,GAAD,CAAP,GAAa,KAAK+C,SAAL,CAAeD,CAAC,GAAG,CAAnB,CAAb;AACAtD,UAAAA,QAAQ,CAACrB,EAAD,CAAR,GAAcA,EAAd,CAHsG,CAGrF;;AACjB+D,UAAAA,QAAQ;AACR/D,UAAAA,EAAC,GAAG0E,CAAJ;AACH,SA/C8C,CAiD/C;;;AACA,YAAID,CAAC,KAAKF,KAAV,EAAiB;AACb,iBAAOG,CAAC,GAAGtD,QAAQ,CAACqD,CAAD,CAAZ,EAAiBhB,MAAM,CAAC3B,GAAD,EAAIC,GAAJ,EAAOhC,MAAM,CAAC,IAAI2E,CAAL,CAAb,EAAsB3E,MAAM,CAAC,IAAI2E,CAAJ,GAAQ,CAAT,CAA5B,EAAyC3E,MAAM,CAAC,IAAI0E,CAAL,CAA/C,EAAwD1E,MAAM,CAAC,IAAI0E,CAAJ,GAAQ,CAAT,CAA9D,CAA9B,EAA0G;AACtGE,YAAAA,CAAC,GAAG,KAAKT,YAAL,CAAkBQ,CAAlB,EAAqB7C,GAArB,EAAwB4C,CAAxB,EAA2B,CAAC,CAA5B,EAA+BnD,OAAO,CAACmD,CAAD,CAAtC,EAA2CnD,OAAO,CAACoD,CAAD,CAAlD,CAAJ;;AACA,iBAAKE,SAAL,CAAeD,CAAC,GAAG,CAAnB;;AACArD,YAAAA,OAAO,CAACoD,CAAD,CAAP,GAAaC,CAAb;AACAtD,YAAAA,QAAQ,CAACoD,CAAD,CAAR,GAAcA,CAAd,CAJsG,CAIrF;;AACjBV,YAAAA,QAAQ;AACRU,YAAAA,CAAC,GAAGC,CAAJ;AACH;AACJ,SA3D8C,CA6D/C;;;AACA,aAAKZ,UAAL,GAAkB1C,QAAQ,CAACS,GAAD,CAAR,GAAc4C,CAAhC;AACApD,QAAAA,QAAQ,CAACoD,CAAD,CAAR,GAAcrD,QAAQ,CAACpB,EAAD,CAAR,GAAc6B,GAA5B;AACAR,QAAAA,QAAQ,CAACQ,GAAD,CAAR,GAAc7B,EAAd,CAhE+C,CAkE/C;;AACAuB,QAAAA,QAAQ,CAAC,KAAKyC,QAAL,CAAclC,GAAd,EAAiBC,GAAjB,CAAD,CAAR,GAAgCF,GAAhC;AACAN,QAAAA,QAAQ,CAAC,KAAKyC,QAAL,CAAcjE,MAAM,CAAC,IAAI0E,CAAL,CAApB,EAA6B1E,MAAM,CAAC,IAAI0E,CAAJ,GAAQ,CAAT,CAAnC,CAAD,CAAR,GAA4DA,CAA5D;AACH;;AAED,WAAKvB,IAAL,GAAY,IAAIrD,WAAJ,CAAgBkE,QAAhB,CAAZ;;AACA,WAAK,IAAIlC,GAAC,GAAG,CAAR,EAAW4C,EAAC,GAAG,KAAKX,UAAzB,EAAqCjC,GAAC,GAAGkC,QAAzC,EAAmDlC,GAAC,EAApD,EAAwD;AACpD,aAAKqB,IAAL,CAAUrB,GAAV,IAAe4C,EAAf;AACAA,QAAAA,EAAC,GAAGpD,QAAQ,CAACoD,EAAD,CAAZ;AACH,OA7MI,CA+ML;;;AACA,WAAKlB,SAAL,GAAiB,KAAKlD,UAAL,CAAgBiD,QAAhB,CAAyB,CAAzB,EAA4B,KAAKW,YAAjC,CAAjB;AACA,WAAKT,SAAL,GAAiB,KAAKlD,UAAL,CAAgBgD,QAAhB,CAAyB,CAAzB,EAA4B,KAAKW,YAAjC,CAAjB;AACH;;;WAED,kBAASnC,CAAT,EAAYC,CAAZ,EAAe;AACX,aAAOrC,IAAI,CAACmF,KAAL,CAAWC,WAAW,CAAChD,CAAC,GAAG,KAAK8B,GAAV,EAAe7B,CAAC,GAAG,KAAK8B,GAAxB,CAAX,GAA0C,KAAKrD,SAA1D,IAAuE,KAAKA,SAAnF;AACH;;;WAED,mBAAUuE,CAAV,EAAa;AAAA,UACUxB,SADV,GACsD,IADtD,CACFlD,UADE;AAAA,UACiCmD,SADjC,GACsD,IADtD,CACqBlD,UADrB;AAAA,UAC4CP,MAD5C,GACsD,IADtD,CAC4CA,MAD5C;AAGT,UAAI8B,CAAC,GAAG,CAAR;AACA,UAAImD,EAAE,GAAG,CAAT,CAJS,CAMT;;AACA,aAAO,IAAP,EAAa;AACT,YAAMC,CAAC,GAAGzB,SAAS,CAACuB,CAAD,CAAnB;AAEA;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACY,YAAMG,EAAE,GAAGH,CAAC,GAAGA,CAAC,GAAG,CAAnB;AACAC,QAAAA,EAAE,GAAGE,EAAE,GAAG,CAACH,CAAC,GAAG,CAAL,IAAU,CAApB;;AAEA,YAAIE,CAAC,KAAK,CAAC,CAAX,EAAc;AAAE;AACZ,cAAIpD,CAAC,KAAK,CAAV,EAAa;AACbkD,UAAAA,CAAC,GAAGnF,UAAU,CAAC,EAAEiC,CAAH,CAAd;AACA;AACH;;AAED,YAAMsD,EAAE,GAAGF,CAAC,GAAGA,CAAC,GAAG,CAAnB;AACA,YAAMG,EAAE,GAAGF,EAAE,GAAG,CAACH,CAAC,GAAG,CAAL,IAAU,CAA1B;AACA,YAAMM,EAAE,GAAGF,EAAE,GAAG,CAACF,CAAC,GAAG,CAAL,IAAU,CAA1B;AAEA,YAAMK,EAAE,GAAG/B,SAAS,CAACyB,EAAD,CAApB;AACA,YAAMO,EAAE,GAAGhC,SAAS,CAACwB,CAAD,CAApB;AACA,YAAMS,EAAE,GAAGjC,SAAS,CAAC6B,EAAD,CAApB;AACA,YAAMK,EAAE,GAAGlC,SAAS,CAAC8B,EAAD,CAApB;AAEA,YAAMK,OAAO,GAAGC,QAAQ,CACpB5F,MAAM,CAAC,IAAIuF,EAAL,CADc,EACJvF,MAAM,CAAC,IAAIuF,EAAJ,GAAS,CAAV,CADF,EAEpBvF,MAAM,CAAC,IAAIwF,EAAL,CAFc,EAEJxF,MAAM,CAAC,IAAIwF,EAAJ,GAAS,CAAV,CAFF,EAGpBxF,MAAM,CAAC,IAAIyF,EAAL,CAHc,EAGJzF,MAAM,CAAC,IAAIyF,EAAJ,GAAS,CAAV,CAHF,EAIpBzF,MAAM,CAAC,IAAI0F,EAAL,CAJc,EAIJ1F,MAAM,CAAC,IAAI0F,EAAJ,GAAS,CAAV,CAJF,CAAxB;;AAMA,YAAIC,OAAJ,EAAa;AACTnC,UAAAA,SAAS,CAACwB,CAAD,CAAT,GAAeU,EAAf;AACAlC,UAAAA,SAAS,CAAC0B,CAAD,CAAT,GAAeK,EAAf;AAEA,cAAMM,GAAG,GAAGpC,SAAS,CAAC6B,EAAD,CAArB,CAJS,CAMT;;AACA,cAAIO,GAAG,KAAK,CAAC,CAAb,EAAgB;AACZ,gBAAInB,CAAC,GAAG,KAAKX,UAAb;;AACA,eAAG;AACC,kBAAI,KAAKjD,QAAL,CAAc4D,CAAd,MAAqBY,EAAzB,EAA6B;AACzB,qBAAKxE,QAAL,CAAc4D,CAAd,IAAmBM,CAAnB;AACA;AACH;;AACDN,cAAAA,CAAC,GAAG,KAAK9D,SAAL,CAAe8D,CAAf,CAAJ;AACH,aAND,QAMSA,CAAC,KAAK,KAAKX,UANpB;AAOH;;AACD,eAAK+B,KAAL,CAAWd,CAAX,EAAca,GAAd;;AACA,eAAKC,KAAL,CAAWZ,CAAX,EAAczB,SAAS,CAACwB,EAAD,CAAvB;;AACA,eAAKa,KAAL,CAAWb,EAAX,EAAeK,EAAf;;AAEA,cAAMS,EAAE,GAAGX,EAAE,GAAG,CAACF,CAAC,GAAG,CAAL,IAAU,CAA1B,CArBS,CAuBT;;AACA,cAAIpD,CAAC,GAAGjC,UAAU,CAACK,MAAnB,EAA2B;AACvBL,YAAAA,UAAU,CAACiC,CAAC,EAAF,CAAV,GAAkBiE,EAAlB;AACH;AACJ,SA3BD,MA2BO;AACH,cAAIjE,CAAC,KAAK,CAAV,EAAa;AACbkD,UAAAA,CAAC,GAAGnF,UAAU,CAAC,EAAEiC,CAAH,CAAd;AACH;AACJ;;AAED,aAAOmD,EAAP;AACH;;;WAED,eAAMD,CAAN,EAASE,CAAT,EAAY;AACR,WAAK3E,UAAL,CAAgByE,CAAhB,IAAqBE,CAArB;AACA,UAAIA,CAAC,KAAK,CAAC,CAAX,EAAc,KAAK3E,UAAL,CAAgB2E,CAAhB,IAAqBF,CAArB;AACjB,K,CAED;;;;WACA,sBAAa5C,EAAb,EAAiBC,EAAjB,EAAqBC,EAArB,EAAyB0C,CAAzB,EAA4BE,CAA5B,EAA+Bc,CAA/B,EAAkC;AAC9B,UAAMpB,CAAC,GAAG,KAAKV,YAAf;AAEA,WAAK5D,UAAL,CAAgBsE,CAAhB,IAAqBxC,EAArB;AACA,WAAK9B,UAAL,CAAgBsE,CAAC,GAAG,CAApB,IAAyBvC,EAAzB;AACA,WAAK/B,UAAL,CAAgBsE,CAAC,GAAG,CAApB,IAAyBtC,EAAzB;;AAEA,WAAKwD,KAAL,CAAWlB,CAAX,EAAcI,CAAd;;AACA,WAAKc,KAAL,CAAWlB,CAAC,GAAG,CAAf,EAAkBM,CAAlB;;AACA,WAAKY,KAAL,CAAWlB,CAAC,GAAG,CAAf,EAAkBoB,CAAlB;;AAEA,WAAK9B,YAAL,IAAqB,CAArB;AAEA,aAAOU,CAAP;AACH;;;WAvWD,cAAYqB,MAAZ,EAA4D;AAAA,UAAxCC,IAAwC,uEAAjCC,WAAiC;AAAA,UAApBC,IAAoB,uEAAbC,WAAa;AACxD,UAAMpG,CAAC,GAAGgG,MAAM,CAAC/F,MAAjB;AACA,UAAMF,MAAM,GAAG,IAAImB,YAAJ,CAAiBlB,CAAC,GAAG,CAArB,CAAf;;AAEA,WAAK,IAAI6B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG7B,CAApB,EAAuB6B,CAAC,EAAxB,EAA4B;AACxB,YAAMwE,CAAC,GAAGL,MAAM,CAACnE,CAAD,CAAhB;AACA9B,QAAAA,MAAM,CAAC,IAAI8B,CAAL,CAAN,GAAgBoE,IAAI,CAACI,CAAD,CAApB;AACAtG,QAAAA,MAAM,CAAC,IAAI8B,CAAJ,GAAQ,CAAT,CAAN,GAAoBsE,IAAI,CAACE,CAAD,CAAxB;AACH;;AAED,aAAO,IAAIvG,UAAJ,CAAeC,MAAf,CAAP;AACH;;;;KA+VL;;;SA5WqBD,U;;AA6WrB,SAASgF,WAAT,CAAqBwB,EAArB,EAAyBC,EAAzB,EAA6B;AACzB,MAAMF,CAAC,GAAGC,EAAE,IAAI5G,IAAI,CAAC4E,GAAL,CAASgC,EAAT,IAAe5G,IAAI,CAAC4E,GAAL,CAASiC,EAAT,CAAnB,CAAZ;AACA,SAAO,CAACA,EAAE,GAAG,CAAL,GAAS,IAAIF,CAAb,GAAiB,IAAIA,CAAtB,IAA2B,CAAlC,CAFyB,CAEY;AACxC;;AAED,SAAS9D,IAAT,CAAciE,EAAd,EAAkBC,EAAlB,EAAsBC,EAAtB,EAA0BC,EAA1B,EAA8B;AAC1B,MAAML,EAAE,GAAGE,EAAE,GAAGE,EAAhB;AACA,MAAMH,EAAE,GAAGE,EAAE,GAAGE,EAAhB;AACA,SAAOL,EAAE,GAAGA,EAAL,GAAUC,EAAE,GAAGA,EAAtB;AACH,C,CAED;;;AACA,SAASK,YAAT,CAAsBC,EAAtB,EAA0BC,EAA1B,EAA8BC,EAA9B,EAAkCC,EAAlC,EAAsCC,EAAtC,EAA0CC,EAA1C,EAA8C;AAC1C,MAAMC,CAAC,GAAG,CAACH,EAAE,GAAGF,EAAN,KAAaG,EAAE,GAAGJ,EAAlB,CAAV;AACA,MAAMhE,CAAC,GAAG,CAACkE,EAAE,GAAGF,EAAN,KAAaK,EAAE,GAAGJ,EAAlB,CAAV;AACA,SAAOpH,IAAI,CAAC4E,GAAL,CAAS6C,CAAC,GAAGtE,CAAb,KAAmB,yBAAyBnD,IAAI,CAAC4E,GAAL,CAAS6C,CAAC,GAAGtE,CAAb,CAA5C,GAA8DsE,CAAC,GAAGtE,CAAlE,GAAsE,CAA7E;AACH,C,CAED;;;AACA,SAASY,MAAT,CAAgBsD,EAAhB,EAAoBC,EAApB,EAAwBC,EAAxB,EAA4BC,EAA5B,EAAgCL,EAAhC,EAAoCC,EAApC,EAAwC;AACpC,MAAMM,IAAI,GAAGR,YAAY,CAACC,EAAD,EAAKC,EAAL,EAASC,EAAT,EAAaC,EAAb,EAAiBC,EAAjB,EAAqBC,EAArB,CAAZ,IACbN,YAAY,CAACG,EAAD,EAAKC,EAAL,EAASC,EAAT,EAAaC,EAAb,EAAiBL,EAAjB,EAAqBC,EAArB,CADC,IAEbF,YAAY,CAACK,EAAD,EAAKC,EAAL,EAASL,EAAT,EAAaC,EAAb,EAAiBC,EAAjB,EAAqBC,EAArB,CAFZ;AAGA,SAAOI,IAAI,GAAG,CAAd;AACH;;AAED,SAASzB,QAAT,CAAkBa,EAAlB,EAAsBC,EAAtB,EAA0BC,EAA1B,EAA8BC,EAA9B,EAAkC3E,EAAlC,EAAsCC,EAAtC,EAA0C4E,EAA1C,EAA8CC,EAA9C,EAAkD;AAC9C,MAAMR,EAAE,GAAGE,EAAE,GAAGK,EAAhB;AACA,MAAMN,EAAE,GAAGE,EAAE,GAAGK,EAAhB;AACA,MAAMO,EAAE,GAAGX,EAAE,GAAGG,EAAhB;AACA,MAAMS,EAAE,GAAGX,EAAE,GAAGG,EAAhB;AACA,MAAMS,EAAE,GAAGvF,EAAE,GAAG6E,EAAhB;AACA,MAAMW,EAAE,GAAGvF,EAAE,GAAG6E,EAAhB;AAEA,MAAMW,EAAE,GAAGnB,EAAE,GAAGA,EAAL,GAAUC,EAAE,GAAGA,EAA1B;AACA,MAAMmB,EAAE,GAAGL,EAAE,GAAGA,EAAL,GAAUC,EAAE,GAAGA,EAA1B;AACA,MAAMK,EAAE,GAAGJ,EAAE,GAAGA,EAAL,GAAUC,EAAE,GAAGA,EAA1B;AAEA,SAAOlB,EAAE,IAAIgB,EAAE,GAAGK,EAAL,GAAUD,EAAE,GAAGF,EAAnB,CAAF,GACAjB,EAAE,IAAIc,EAAE,GAAGM,EAAL,GAAUD,EAAE,GAAGH,EAAnB,CADF,GAEAE,EAAE,IAAIJ,EAAE,GAAGG,EAAL,GAAUF,EAAE,GAAGC,EAAnB,CAFF,GAE2B,CAFlC;AAGH;;AAED,SAASzE,YAAT,CAAsB0D,EAAtB,EAA0BC,EAA1B,EAA8BC,EAA9B,EAAkCC,EAAlC,EAAsC3E,EAAtC,EAA0CC,EAA1C,EAA8C;AAC1C,MAAMqE,EAAE,GAAGI,EAAE,GAAGF,EAAhB;AACA,MAAMD,EAAE,GAAGI,EAAE,GAAGF,EAAhB;AACA,MAAMY,EAAE,GAAGrF,EAAE,GAAGwE,EAAhB;AACA,MAAMc,EAAE,GAAGrF,EAAE,GAAGwE,EAAhB;AAEA,MAAMpB,EAAE,GAAGiB,EAAE,GAAGA,EAAL,GAAUC,EAAE,GAAGA,EAA1B;AACA,MAAMqB,EAAE,GAAGP,EAAE,GAAGA,EAAL,GAAUC,EAAE,GAAGA,EAA1B;AACA,MAAMhF,CAAC,GAAG,OAAOgE,EAAE,GAAGgB,EAAL,GAAUf,EAAE,GAAGc,EAAtB,CAAV;AAEA,MAAMvF,CAAC,GAAG,CAACwF,EAAE,GAAGjC,EAAL,GAAUkB,EAAE,GAAGqB,EAAhB,IAAsBtF,CAAhC;AACA,MAAMP,CAAC,GAAG,CAACuE,EAAE,GAAGsB,EAAL,GAAUP,EAAE,GAAGhC,EAAhB,IAAsB/C,CAAhC;AAEA,SAAOR,CAAC,GAAGA,CAAJ,GAAQC,CAAC,GAAGA,CAAnB;AACH;;AAED,SAAS4B,YAAT,CAAsB6C,EAAtB,EAA0BC,EAA1B,EAA8BC,EAA9B,EAAkCC,EAAlC,EAAsC3E,EAAtC,EAA0CC,EAA1C,EAA8C;AAC1C,MAAMqE,EAAE,GAAGI,EAAE,GAAGF,EAAhB;AACA,MAAMD,EAAE,GAAGI,EAAE,GAAGF,EAAhB;AACA,MAAMY,EAAE,GAAGrF,EAAE,GAAGwE,EAAhB;AACA,MAAMc,EAAE,GAAGrF,EAAE,GAAGwE,EAAhB;AAEA,MAAMpB,EAAE,GAAGiB,EAAE,GAAGA,EAAL,GAAUC,EAAE,GAAGA,EAA1B;AACA,MAAMqB,EAAE,GAAGP,EAAE,GAAGA,EAAL,GAAUC,EAAE,GAAGA,EAA1B;AACA,MAAMhF,CAAC,GAAG,OAAOgE,EAAE,GAAGgB,EAAL,GAAUf,EAAE,GAAGc,EAAtB,CAAV;AAEA,MAAMvF,CAAC,GAAG0E,EAAE,GAAG,CAACc,EAAE,GAAGjC,EAAL,GAAUkB,EAAE,GAAGqB,EAAhB,IAAsBtF,CAArC;AACA,MAAMP,CAAC,GAAG0E,EAAE,GAAG,CAACH,EAAE,GAAGsB,EAAL,GAAUP,EAAE,GAAGhC,EAAhB,IAAsB/C,CAArC;AAEA,SAAO;AAACR,IAAAA,CAAC,EAADA,CAAD;AAAIC,IAAAA,CAAC,EAADA;AAAJ,GAAP;AACH;;AAED,SAASkB,SAAT,CAAmB4E,GAAnB,EAAwBC,KAAxB,EAA+BC,IAA/B,EAAqCC,KAArC,EAA4C;AACxC,MAAIA,KAAK,GAAGD,IAAR,IAAgB,EAApB,EAAwB;AACpB,SAAK,IAAIlG,CAAC,GAAGkG,IAAI,GAAG,CAApB,EAAuBlG,CAAC,IAAImG,KAA5B,EAAmCnG,CAAC,EAApC,EAAwC;AACpC,UAAMoG,IAAI,GAAGJ,GAAG,CAAChG,CAAD,CAAhB;AACA,UAAMqG,QAAQ,GAAGJ,KAAK,CAACG,IAAD,CAAtB;AACA,UAAI9E,CAAC,GAAGtB,CAAC,GAAG,CAAZ;;AACA,aAAOsB,CAAC,IAAI4E,IAAL,IAAaD,KAAK,CAACD,GAAG,CAAC1E,CAAD,CAAJ,CAAL,GAAgB+E,QAApC;AAA8CL,QAAAA,GAAG,CAAC1E,CAAC,GAAG,CAAL,CAAH,GAAa0E,GAAG,CAAC1E,CAAC,EAAF,CAAhB;AAA9C;;AACA0E,MAAAA,GAAG,CAAC1E,CAAC,GAAG,CAAL,CAAH,GAAa8E,IAAb;AACH;AACJ,GARD,MAQO;AACH,QAAME,MAAM,GAAIJ,IAAI,GAAGC,KAAR,IAAkB,CAAjC;;AACA,QAAInG,IAAC,GAAGkG,IAAI,GAAG,CAAf;;AACA,QAAI5E,GAAC,GAAG6E,KAAR;AACAI,IAAAA,IAAI,CAACP,GAAD,EAAMM,MAAN,EAActG,IAAd,CAAJ;AACA,QAAIiG,KAAK,CAACD,GAAG,CAACE,IAAD,CAAJ,CAAL,GAAmBD,KAAK,CAACD,GAAG,CAACG,KAAD,CAAJ,CAA5B,EAA0CI,IAAI,CAACP,GAAD,EAAME,IAAN,EAAYC,KAAZ,CAAJ;AAC1C,QAAIF,KAAK,CAACD,GAAG,CAAChG,IAAD,CAAJ,CAAL,GAAgBiG,KAAK,CAACD,GAAG,CAACG,KAAD,CAAJ,CAAzB,EAAuCI,IAAI,CAACP,GAAD,EAAMhG,IAAN,EAASmG,KAAT,CAAJ;AACvC,QAAIF,KAAK,CAACD,GAAG,CAACE,IAAD,CAAJ,CAAL,GAAmBD,KAAK,CAACD,GAAG,CAAChG,IAAD,CAAJ,CAA5B,EAAsCuG,IAAI,CAACP,GAAD,EAAME,IAAN,EAAYlG,IAAZ,CAAJ;AAEtC,QAAMoG,KAAI,GAAGJ,GAAG,CAAChG,IAAD,CAAhB;AACA,QAAMqG,SAAQ,GAAGJ,KAAK,CAACG,KAAD,CAAtB;;AACA,WAAO,IAAP,EAAa;AACT;AAAGpG,QAAAA,IAAC;AAAJ,eAAeiG,KAAK,CAACD,GAAG,CAAChG,IAAD,CAAJ,CAAL,GAAgBqG,SAA/B;;AACA;AAAG/E,QAAAA,GAAC;AAAJ,eAAe2E,KAAK,CAACD,GAAG,CAAC1E,GAAD,CAAJ,CAAL,GAAgB+E,SAA/B;;AACA,UAAI/E,GAAC,GAAGtB,IAAR,EAAW;AACXuG,MAAAA,IAAI,CAACP,GAAD,EAAMhG,IAAN,EAASsB,GAAT,CAAJ;AACH;;AACD0E,IAAAA,GAAG,CAACE,IAAI,GAAG,CAAR,CAAH,GAAgBF,GAAG,CAAC1E,GAAD,CAAnB;AACA0E,IAAAA,GAAG,CAAC1E,GAAD,CAAH,GAAS8E,KAAT;;AAEA,QAAID,KAAK,GAAGnG,IAAR,GAAY,CAAZ,IAAiBsB,GAAC,GAAG4E,IAAzB,EAA+B;AAC3B9E,MAAAA,SAAS,CAAC4E,GAAD,EAAMC,KAAN,EAAajG,IAAb,EAAgBmG,KAAhB,CAAT;AACA/E,MAAAA,SAAS,CAAC4E,GAAD,EAAMC,KAAN,EAAaC,IAAb,EAAmB5E,GAAC,GAAG,CAAvB,CAAT;AACH,KAHD,MAGO;AACHF,MAAAA,SAAS,CAAC4E,GAAD,EAAMC,KAAN,EAAaC,IAAb,EAAmB5E,GAAC,GAAG,CAAvB,CAAT;AACAF,MAAAA,SAAS,CAAC4E,GAAD,EAAMC,KAAN,EAAajG,IAAb,EAAgBmG,KAAhB,CAAT;AACH;AACJ;AACJ;;AAED,SAASI,IAAT,CAAcC,GAAd,EAAmBxG,CAAnB,EAAsBsB,CAAtB,EAAyB;AACrB,MAAMmF,GAAG,GAAGD,GAAG,CAACxG,CAAD,CAAf;AACAwG,EAAAA,GAAG,CAACxG,CAAD,CAAH,GAASwG,GAAG,CAAClF,CAAD,CAAZ;AACAkF,EAAAA,GAAG,CAAClF,CAAD,CAAH,GAASmF,GAAT;AACH;;AAED,SAASpC,WAAT,CAAqBG,CAArB,EAAwB;AACpB,SAAOA,CAAC,CAAC,CAAD,CAAR;AACH;;AACD,SAASD,WAAT,CAAqBC,CAArB,EAAwB;AACpB,SAAOA,CAAC,CAAC,CAAD,CAAR;AACH","sourcesContent":["\nconst EPSILON = Math.pow(2, -52);\nconst EDGE_STACK = new Uint32Array(512);\n\nexport default class Delaunator {\n\n    static from(points, getX = defaultGetX, getY = defaultGetY) {\n        const n = points.length;\n        const coords = new Float64Array(n * 2);\n\n        for (let i = 0; i < n; i++) {\n            const p = points[i];\n            coords[2 * i] = getX(p);\n            coords[2 * i + 1] = getY(p);\n        }\n\n        return new Delaunator(coords);\n    }\n\n    constructor(coords) {\n        const n = coords.length >> 1;\n        if (n > 0 && typeof coords[0] !== 'number') throw new Error('Expected coords to contain numbers.');\n\n        this.coords = coords;\n\n        // arrays that will store the triangulation graph\n        const maxTriangles = Math.max(2 * n - 5, 0);\n        this._triangles = new Uint32Array(maxTriangles * 3);\n        this._halfedges = new Int32Array(maxTriangles * 3);\n\n        // temporary arrays for tracking the edges of the advancing convex hull\n        this._hashSize = Math.ceil(Math.sqrt(n));\n        this._hullPrev = new Uint32Array(n); // edge to prev edge\n        this._hullNext = new Uint32Array(n); // edge to next edge\n        this._hullTri = new Uint32Array(n); // edge to adjacent triangle\n        this._hullHash = new Int32Array(this._hashSize).fill(-1); // angular edge hash\n\n        // temporary arrays for sorting points\n        this._ids = new Uint32Array(n);\n        this._dists = new Float64Array(n);\n\n        this.update();\n    }\n\n    update() {\n        const {coords, _hullPrev: hullPrev, _hullNext: hullNext, _hullTri: hullTri, _hullHash: hullHash} =  this;\n        const n = coords.length >> 1;\n\n        // populate an array of point indices; calculate input data bbox\n        let minX = Infinity;\n        let minY = Infinity;\n        let maxX = -Infinity;\n        let maxY = -Infinity;\n\n        for (let i = 0; i < n; i++) {\n            const x = coords[2 * i];\n            const y = coords[2 * i + 1];\n            if (x < minX) minX = x;\n            if (y < minY) minY = y;\n            if (x > maxX) maxX = x;\n            if (y > maxY) maxY = y;\n            this._ids[i] = i;\n        }\n        const cx = (minX + maxX) / 2;\n        const cy = (minY + maxY) / 2;\n\n        let minDist = Infinity;\n        let i0, i1, i2;\n\n        // pick a seed point close to the center\n        for (let i = 0; i < n; i++) {\n            const d = dist(cx, cy, coords[2 * i], coords[2 * i + 1]);\n            if (d < minDist) {\n                i0 = i;\n                minDist = d;\n            }\n        }\n        const i0x = coords[2 * i0];\n        const i0y = coords[2 * i0 + 1];\n\n        minDist = Infinity;\n\n        // find the point closest to the seed\n        for (let i = 0; i < n; i++) {\n            if (i === i0) continue;\n            const d = dist(i0x, i0y, coords[2 * i], coords[2 * i + 1]);\n            if (d < minDist && d > 0) {\n                i1 = i;\n                minDist = d;\n            }\n        }\n        let i1x = coords[2 * i1];\n        let i1y = coords[2 * i1 + 1];\n\n        let minRadius = Infinity;\n\n        // find the third point which forms the smallest circumcircle with the first two\n        for (let i = 0; i < n; i++) {\n            if (i === i0 || i === i1) continue;\n            const r = circumradius(i0x, i0y, i1x, i1y, coords[2 * i], coords[2 * i + 1]);\n            if (r < minRadius) {\n                i2 = i;\n                minRadius = r;\n            }\n        }\n        let i2x = coords[2 * i2];\n        let i2y = coords[2 * i2 + 1];\n\n        if (minRadius === Infinity) {\n            // order collinear points by dx (or dy if all x are identical)\n            // and return the list as a hull\n            for (let i = 0; i < n; i++) {\n                this._dists[i] = (coords[2 * i] - coords[0]) || (coords[2 * i + 1] - coords[1]);\n            }\n            quicksort(this._ids, this._dists, 0, n - 1);\n            const hull = new Uint32Array(n);\n            let j = 0;\n            for (let i = 0, d0 = -Infinity; i < n; i++) {\n                const id = this._ids[i];\n                if (this._dists[id] > d0) {\n                    hull[j++] = id;\n                    d0 = this._dists[id];\n                }\n            }\n            this.hull = hull.subarray(0, j);\n            this.triangles = new Uint32Array(0);\n            this.halfedges = new Uint32Array(0);\n            return;\n        }\n\n        // swap the order of the seed points for counter-clockwise orientation\n        if (orient(i0x, i0y, i1x, i1y, i2x, i2y)) {\n            const i = i1;\n            const x = i1x;\n            const y = i1y;\n            i1 = i2;\n            i1x = i2x;\n            i1y = i2y;\n            i2 = i;\n            i2x = x;\n            i2y = y;\n        }\n\n        const center = circumcenter(i0x, i0y, i1x, i1y, i2x, i2y);\n        this._cx = center.x;\n        this._cy = center.y;\n\n        for (let i = 0; i < n; i++) {\n            this._dists[i] = dist(coords[2 * i], coords[2 * i + 1], center.x, center.y);\n        }\n\n        // sort the points by distance from the seed triangle circumcenter\n        quicksort(this._ids, this._dists, 0, n - 1);\n\n        // set up the seed triangle as the starting hull\n        this._hullStart = i0;\n        let hullSize = 3;\n\n        hullNext[i0] = hullPrev[i2] = i1;\n        hullNext[i1] = hullPrev[i0] = i2;\n        hullNext[i2] = hullPrev[i1] = i0;\n\n        hullTri[i0] = 0;\n        hullTri[i1] = 1;\n        hullTri[i2] = 2;\n\n        hullHash.fill(-1);\n        hullHash[this._hashKey(i0x, i0y)] = i0;\n        hullHash[this._hashKey(i1x, i1y)] = i1;\n        hullHash[this._hashKey(i2x, i2y)] = i2;\n\n        this.trianglesLen = 0;\n        this._addTriangle(i0, i1, i2, -1, -1, -1);\n\n        for (let k = 0, xp, yp; k < this._ids.length; k++) {\n            const i = this._ids[k];\n            const x = coords[2 * i];\n            const y = coords[2 * i + 1];\n\n            // skip near-duplicate points\n            if (k > 0 && Math.abs(x - xp) <= EPSILON && Math.abs(y - yp) <= EPSILON) continue;\n            xp = x;\n            yp = y;\n\n            // skip seed triangle points\n            if (i === i0 || i === i1 || i === i2) continue;\n\n            // find a visible edge on the convex hull using edge hash\n            let start = 0;\n            for (let j = 0, key = this._hashKey(x, y); j < this._hashSize; j++) {\n                start = hullHash[(key + j) % this._hashSize];\n                if (start !== -1 && start !== hullNext[start]) break;\n            }\n\n            start = hullPrev[start];\n            let e = start, q;\n            while (q = hullNext[e], !orient(x, y, coords[2 * e], coords[2 * e + 1], coords[2 * q], coords[2 * q + 1])) {\n                e = q;\n                if (e === start) {\n                    e = -1;\n                    break;\n                }\n            }\n            if (e === -1) continue; // likely a near-duplicate point; skip it\n\n            // add the first triangle from the point\n            let t = this._addTriangle(e, i, hullNext[e], -1, -1, hullTri[e]);\n\n            // recursively flip triangles from the point until they satisfy the Delaunay condition\n            hullTri[i] = this._legalize(t + 2);\n            hullTri[e] = t; // keep track of boundary triangles on the hull\n            hullSize++;\n\n            // walk forward through the hull, adding more triangles and flipping recursively\n            let n = hullNext[e];\n            while (q = hullNext[n], orient(x, y, coords[2 * n], coords[2 * n + 1], coords[2 * q], coords[2 * q + 1])) {\n                t = this._addTriangle(n, i, q, hullTri[i], -1, hullTri[n]);\n                hullTri[i] = this._legalize(t + 2);\n                hullNext[n] = n; // mark as removed\n                hullSize--;\n                n = q;\n            }\n\n            // walk backward from the other side, adding more triangles and flipping\n            if (e === start) {\n                while (q = hullPrev[e], orient(x, y, coords[2 * q], coords[2 * q + 1], coords[2 * e], coords[2 * e + 1])) {\n                    t = this._addTriangle(q, i, e, -1, hullTri[e], hullTri[q]);\n                    this._legalize(t + 2);\n                    hullTri[q] = t;\n                    hullNext[e] = e; // mark as removed\n                    hullSize--;\n                    e = q;\n                }\n            }\n\n            // update the hull indices\n            this._hullStart = hullPrev[i] = e;\n            hullNext[e] = hullPrev[n] = i;\n            hullNext[i] = n;\n\n            // save the two new edges in the hash table\n            hullHash[this._hashKey(x, y)] = i;\n            hullHash[this._hashKey(coords[2 * e], coords[2 * e + 1])] = e;\n        }\n\n        this.hull = new Uint32Array(hullSize);\n        for (let i = 0, e = this._hullStart; i < hullSize; i++) {\n            this.hull[i] = e;\n            e = hullNext[e];\n        }\n\n        // trim typed triangle mesh arrays\n        this.triangles = this._triangles.subarray(0, this.trianglesLen);\n        this.halfedges = this._halfedges.subarray(0, this.trianglesLen);\n    }\n\n    _hashKey(x, y) {\n        return Math.floor(pseudoAngle(x - this._cx, y - this._cy) * this._hashSize) % this._hashSize;\n    }\n\n    _legalize(a) {\n        const {_triangles: triangles, _halfedges: halfedges, coords} = this;\n\n        let i = 0;\n        let ar = 0;\n\n        // recursion eliminated with a fixed-size stack\n        while (true) {\n            const b = halfedges[a];\n\n            /* if the pair of triangles doesn't satisfy the Delaunay condition\n             * (p1 is inside the circumcircle of [p0, pl, pr]), flip them,\n             * then do the same check/flip recursively for the new pair of triangles\n             *\n             *           pl                    pl\n             *          /||\\                  /  \\\n             *       al/ || \\bl            al/    \\a\n             *        /  ||  \\              /      \\\n             *       /  a||b  \\    flip    /___ar___\\\n             *     p0\\   ||   /p1   =>   p0\\---bl---/p1\n             *        \\  ||  /              \\      /\n             *       ar\\ || /br             b\\    /br\n             *          \\||/                  \\  /\n             *           pr                    pr\n             */\n            const a0 = a - a % 3;\n            ar = a0 + (a + 2) % 3;\n\n            if (b === -1) { // convex hull edge\n                if (i === 0) break;\n                a = EDGE_STACK[--i];\n                continue;\n            }\n\n            const b0 = b - b % 3;\n            const al = a0 + (a + 1) % 3;\n            const bl = b0 + (b + 2) % 3;\n\n            const p0 = triangles[ar];\n            const pr = triangles[a];\n            const pl = triangles[al];\n            const p1 = triangles[bl];\n\n            const illegal = inCircle(\n                coords[2 * p0], coords[2 * p0 + 1],\n                coords[2 * pr], coords[2 * pr + 1],\n                coords[2 * pl], coords[2 * pl + 1],\n                coords[2 * p1], coords[2 * p1 + 1]);\n\n            if (illegal) {\n                triangles[a] = p1;\n                triangles[b] = p0;\n\n                const hbl = halfedges[bl];\n\n                // edge swapped on the other side of the hull (rare); fix the halfedge reference\n                if (hbl === -1) {\n                    let e = this._hullStart;\n                    do {\n                        if (this._hullTri[e] === bl) {\n                            this._hullTri[e] = a;\n                            break;\n                        }\n                        e = this._hullPrev[e];\n                    } while (e !== this._hullStart);\n                }\n                this._link(a, hbl);\n                this._link(b, halfedges[ar]);\n                this._link(ar, bl);\n\n                const br = b0 + (b + 1) % 3;\n\n                // don't worry about hitting the cap: it can only happen on extremely degenerate input\n                if (i < EDGE_STACK.length) {\n                    EDGE_STACK[i++] = br;\n                }\n            } else {\n                if (i === 0) break;\n                a = EDGE_STACK[--i];\n            }\n        }\n\n        return ar;\n    }\n\n    _link(a, b) {\n        this._halfedges[a] = b;\n        if (b !== -1) this._halfedges[b] = a;\n    }\n\n    // add a new triangle given vertex indices and adjacent half-edge ids\n    _addTriangle(i0, i1, i2, a, b, c) {\n        const t = this.trianglesLen;\n\n        this._triangles[t] = i0;\n        this._triangles[t + 1] = i1;\n        this._triangles[t + 2] = i2;\n\n        this._link(t, a);\n        this._link(t + 1, b);\n        this._link(t + 2, c);\n\n        this.trianglesLen += 3;\n\n        return t;\n    }\n}\n\n// monotonically increases with real angle, but doesn't need expensive trigonometry\nfunction pseudoAngle(dx, dy) {\n    const p = dx / (Math.abs(dx) + Math.abs(dy));\n    return (dy > 0 ? 3 - p : 1 + p) / 4; // [0..1]\n}\n\nfunction dist(ax, ay, bx, by) {\n    const dx = ax - bx;\n    const dy = ay - by;\n    return dx * dx + dy * dy;\n}\n\n// return 2d orientation sign if we're confident in it through J. Shewchuk's error bound check\nfunction orientIfSure(px, py, rx, ry, qx, qy) {\n    const l = (ry - py) * (qx - px);\n    const r = (rx - px) * (qy - py);\n    return Math.abs(l - r) >= 3.3306690738754716e-16 * Math.abs(l + r) ? l - r : 0;\n}\n\n// a more robust orientation test that's stable in a given triangle (to fix robustness issues)\nfunction orient(rx, ry, qx, qy, px, py) {\n    const sign = orientIfSure(px, py, rx, ry, qx, qy) ||\n    orientIfSure(rx, ry, qx, qy, px, py) ||\n    orientIfSure(qx, qy, px, py, rx, ry);\n    return sign < 0;\n}\n\nfunction inCircle(ax, ay, bx, by, cx, cy, px, py) {\n    const dx = ax - px;\n    const dy = ay - py;\n    const ex = bx - px;\n    const ey = by - py;\n    const fx = cx - px;\n    const fy = cy - py;\n\n    const ap = dx * dx + dy * dy;\n    const bp = ex * ex + ey * ey;\n    const cp = fx * fx + fy * fy;\n\n    return dx * (ey * cp - bp * fy) -\n           dy * (ex * cp - bp * fx) +\n           ap * (ex * fy - ey * fx) < 0;\n}\n\nfunction circumradius(ax, ay, bx, by, cx, cy) {\n    const dx = bx - ax;\n    const dy = by - ay;\n    const ex = cx - ax;\n    const ey = cy - ay;\n\n    const bl = dx * dx + dy * dy;\n    const cl = ex * ex + ey * ey;\n    const d = 0.5 / (dx * ey - dy * ex);\n\n    const x = (ey * bl - dy * cl) * d;\n    const y = (dx * cl - ex * bl) * d;\n\n    return x * x + y * y;\n}\n\nfunction circumcenter(ax, ay, bx, by, cx, cy) {\n    const dx = bx - ax;\n    const dy = by - ay;\n    const ex = cx - ax;\n    const ey = cy - ay;\n\n    const bl = dx * dx + dy * dy;\n    const cl = ex * ex + ey * ey;\n    const d = 0.5 / (dx * ey - dy * ex);\n\n    const x = ax + (ey * bl - dy * cl) * d;\n    const y = ay + (dx * cl - ex * bl) * d;\n\n    return {x, y};\n}\n\nfunction quicksort(ids, dists, left, right) {\n    if (right - left <= 20) {\n        for (let i = left + 1; i <= right; i++) {\n            const temp = ids[i];\n            const tempDist = dists[temp];\n            let j = i - 1;\n            while (j >= left && dists[ids[j]] > tempDist) ids[j + 1] = ids[j--];\n            ids[j + 1] = temp;\n        }\n    } else {\n        const median = (left + right) >> 1;\n        let i = left + 1;\n        let j = right;\n        swap(ids, median, i);\n        if (dists[ids[left]] > dists[ids[right]]) swap(ids, left, right);\n        if (dists[ids[i]] > dists[ids[right]]) swap(ids, i, right);\n        if (dists[ids[left]] > dists[ids[i]]) swap(ids, left, i);\n\n        const temp = ids[i];\n        const tempDist = dists[temp];\n        while (true) {\n            do i++; while (dists[ids[i]] < tempDist);\n            do j--; while (dists[ids[j]] > tempDist);\n            if (j < i) break;\n            swap(ids, i, j);\n        }\n        ids[left + 1] = ids[j];\n        ids[j] = temp;\n\n        if (right - i + 1 >= j - left) {\n            quicksort(ids, dists, i, right);\n            quicksort(ids, dists, left, j - 1);\n        } else {\n            quicksort(ids, dists, left, j - 1);\n            quicksort(ids, dists, i, right);\n        }\n    }\n}\n\nfunction swap(arr, i, j) {\n    const tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp;\n}\n\nfunction defaultGetX(p) {\n    return p[0];\n}\nfunction defaultGetY(p) {\n    return p[1];\n}\n"]},"metadata":{},"sourceType":"module"}