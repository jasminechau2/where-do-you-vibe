{"ast":null,"code":"import _slicedToArray from\"C:/Users/jasmi/where-do-you-vibe/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";//const fs = require('fs');\nvar findCities=function findCities(user,places){//let obj = JSON.parse(user);\nvar artists=user.items;var genreObjForUser=Object();for(var i=0;i<artists.length;i++){var genreListForArtist=artists[i].genres;var posValue=artists.length-i;for(var _i=0;_i<genreListForArtist.length;_i++){var genre=String(genreListForArtist[_i]);if(genreObjForUser[genre]){genreObjForUser[genre]+=posValue;}else{genreObjForUser[genre]=posValue;}}}// https://stackoverflow.com/questions/1069666/sorting-object-property-by-values/16794116#16794116\nvar sortUserGenreObject=Object.fromEntries(Object.entries(genreObjForUser).sort(function(_ref,_ref2){var _ref3=_slicedToArray(_ref,2),a=_ref3[1];var _ref4=_slicedToArray(_ref2,2),b=_ref4[1];return a-b;}));var genreSortedListForUser=[];for(var _genre in sortUserGenreObject){genreSortedListForUser.unshift(_genre);}// console.log(genreSortedListForUser);\n//import cities from json\n// https://www.reddit.com/r/node/comments/2x066w/is_there_an_easy_synchronous_way_to_read_csv/\nvar genreCities=[];//let placesObj = JSON.parse(places);\nvar cities=places.items;for(var _i2=0;_i2<cities.length;_i2++){var specificCity=[];specificCity.push(cities[_i2].city);specificCity.push(cities[_i2].country);specificCity.push(cities[_i2].genres);genreCities.push(specificCity);}var cityMatches=[];// look through each city\nfor(var city=0;city<genreCities.length;city++){var isCityAMatch=0;for(var userGenre=0;userGenre<genreSortedListForUser.length;userGenre++){if(isCityAMatch>5){cityMatches.push(city);break;}// start at 2 bc city, country, genre, ...)\nfor(var cityGenre=2;cityGenre<genreCities[city][2].length;cityGenre++){if(genreCities[city][2][cityGenre]===genreSortedListForUser[userGenre]){isCityAMatch+=1;}}}}// time for least squares\nvar leastSquaresList=[];for(var _city=0;_city<cityMatches.length;_city++){var matchedCityNumber=cityMatches[_city];var cityScore=0;for(var _cityGenre=2;_cityGenre<genreCities[matchedCityNumber].length-1;_cityGenre++){var cityGenrePos=_cityGenre-2;for(var userGenrePos=0;userGenrePos<genreSortedListForUser.length;userGenrePos++){if(genreCities[matchedCityNumber][_cityGenre]===genreSortedListForUser[userGenrePos]){var differenceSquared=Math.pow(cityGenrePos-userGenrePos,2);cityScore+=differenceSquared;}}}var cityScoreObject={cityNumber:matchedCityNumber,score:cityScore};leastSquaresList.push(cityScoreObject);}leastSquaresList.sort(function(a,b){return a.score-b.score;});var topCitiesList=[];var matchingCountries=[];var lowestCityNumber=0;if(leastSquaresList.length>5){lowestCityNumber=leastSquaresList.length-5;}for(var _city2=lowestCityNumber;_city2<leastSquaresList.length;_city2++){var _matchedCityNumber=leastSquaresList[_city2][\"cityNumber\"];topCitiesList.push(genreCities[_matchedCityNumber][0]);matchingCountries.push(genreCities[_matchedCityNumber][1]);}//prints in 5,4,3,2,1 order\nvar returnList=[];returnList.push(topCitiesList);returnList.push(matchingCountries);return returnList;};//let user = fs.readFileSync('./user.json');\n//let places = fs.readFileSync('./places.json');\n//findCities(user, places);\nmodule.exports.findCities=findCities;","map":{"version":3,"sources":["C:/Users/jasmi/where-do-you-vibe/client/src/compare-artists.js"],"names":["findCities","user","places","artists","items","genreObjForUser","Object","i","length","genreListForArtist","genres","posValue","genre","String","sortUserGenreObject","fromEntries","entries","sort","a","b","genreSortedListForUser","unshift","genreCities","cities","specificCity","push","city","country","cityMatches","isCityAMatch","userGenre","cityGenre","leastSquaresList","matchedCityNumber","cityScore","cityGenrePos","userGenrePos","differenceSquared","Math","pow","cityScoreObject","cityNumber","score","topCitiesList","matchingCountries","lowestCityNumber","returnList","module","exports"],"mappings":"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","sourcesContent":["//const fs = require('fs');\r\n\r\nvar findCities = function findCities(user, places) {\r\n\r\n  //let obj = JSON.parse(user);\r\n  let artists = user.items;\r\n\r\n  let genreObjForUser = Object();\r\n\r\n  for (let i = 0; i < artists.length; i++) {\r\n    let genreListForArtist = artists[i].genres;\r\n    let posValue = artists.length-i;\r\n    for(let i = 0; i < genreListForArtist.length; i++){\r\n      let genre = String(genreListForArtist[i]);\r\n      if(genreObjForUser[genre]){\r\n        genreObjForUser[genre] +=posValue;\r\n      }\r\n      else{\r\n        genreObjForUser[genre] = posValue;\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  // https://stackoverflow.com/questions/1069666/sorting-object-property-by-values/16794116#16794116\r\n  const sortUserGenreObject = Object.fromEntries(\r\n    Object.entries(genreObjForUser).sort(([,a],[,b]) => a-b)\r\n  );\r\n\r\n  let genreSortedListForUser = [];\r\n  for (let genre in sortUserGenreObject){\r\n    genreSortedListForUser.unshift(genre);\r\n  }\r\n  // console.log(genreSortedListForUser);\r\n\r\n  //import cities from json\r\n  // https://www.reddit.com/r/node/comments/2x066w/is_there_an_easy_synchronous_way_to_read_csv/\r\n  let genreCities = [];\r\n\r\n  //let placesObj = JSON.parse(places);\r\n  let cities = places.items;\r\n    \r\n  for (let i = 0; i < cities.length; i++) {\r\n    let specificCity = [];\r\n    specificCity.push(cities[i].city);\r\n    specificCity.push(cities[i].country);\r\n    specificCity.push(cities[i].genres);\r\n    genreCities.push(specificCity);\r\n  }\r\n\r\n  let cityMatches = [];\r\n  // look through each city\r\n  for(let city = 0; city < genreCities.length; city++) {\r\n    let isCityAMatch = 0;\r\n    for(let userGenre = 0; userGenre < genreSortedListForUser.length; userGenre++){\r\n      if(isCityAMatch > 5){\r\n        cityMatches.push(city);\r\n        break;\r\n      }\r\n      // start at 2 bc city, country, genre, ...)\r\n      for(let cityGenre = 2; cityGenre < genreCities[city][2].length; cityGenre++){\r\n        if(genreCities[city][2][cityGenre] === genreSortedListForUser[userGenre]){\r\n          isCityAMatch += 1;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // time for least squares\r\n  let leastSquaresList = [];\r\n  for(let city = 0; city < cityMatches.length; city++) {\r\n    let matchedCityNumber = cityMatches[city];\r\n    let cityScore = 0;\r\n\r\n    for(let cityGenre = 2; cityGenre < genreCities[matchedCityNumber].length-1; cityGenre++){\r\n      let cityGenrePos = cityGenre-2;\r\n      for(let userGenrePos = 0; userGenrePos < genreSortedListForUser.length; userGenrePos++){\r\n        if(genreCities[matchedCityNumber][cityGenre] === genreSortedListForUser[userGenrePos]){\r\n          let differenceSquared = Math.pow(cityGenrePos - userGenrePos,2);\r\n\r\n          cityScore += differenceSquared;\r\n        }\r\n      }\r\n    }\r\n    let cityScoreObject = {\r\n      cityNumber: matchedCityNumber,\r\n      score: cityScore\r\n    }\r\n    leastSquaresList.push(cityScoreObject)\r\n  }\r\n\r\n  leastSquaresList.sort(function(a, b){return a.score - b.score});\r\n\r\n  let topCitiesList = [];\r\n  let matchingCountries = [];\r\n\r\n  let lowestCityNumber = 0;\r\n  if(leastSquaresList.length > 5){\r\n    lowestCityNumber = leastSquaresList.length-5\r\n  }\r\n  for(let city = lowestCityNumber; city < leastSquaresList.length; city++) {\r\n    let matchedCityNumber = leastSquaresList[city][\"cityNumber\"];\r\n    topCitiesList.push(genreCities[matchedCityNumber][0]);\r\n    matchingCountries.push(genreCities[matchedCityNumber][1])\r\n  }\r\n//prints in 5,4,3,2,1 order\r\n\r\n  let returnList = [];\r\n  returnList.push(topCitiesList);\r\n  returnList.push(matchingCountries);\r\n\r\n  return returnList;\r\n}\r\n\r\n//let user = fs.readFileSync('./user.json');\r\n//let places = fs.readFileSync('./places.json');\r\n\r\n//findCities(user, places);\r\n\r\nmodule.exports.findCities = findCities;"]},"metadata":{},"sourceType":"module"}