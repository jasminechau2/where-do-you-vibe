{"ast":null,"code":"//const fs = require('fs');\nvar findCities = function findCities(user, places) {\n  //let obj = JSON.parse(user);\n  let artists = user.items;\n  let genreObjForUser = Object();\n\n  for (let i = 0; i < artists.length; i++) {\n    let genreListForArtist = artists[i].genres;\n    let posValue = artists.length - i;\n\n    for (let i = 0; i < genreListForArtist.length; i++) {\n      let genre = String(genreListForArtist[i]);\n\n      if (genreObjForUser[genre]) {\n        genreObjForUser[genre] += posValue;\n      } else {\n        genreObjForUser[genre] = posValue;\n      }\n    }\n  } // https://stackoverflow.com/questions/1069666/sorting-object-property-by-values/16794116#16794116\n\n\n  const sortUserGenreObject = Object.fromEntries(Object.entries(genreObjForUser).sort(([, a], [, b]) => a - b));\n  let genreSortedListForUser = [];\n\n  for (let genre in sortUserGenreObject) {\n    genreSortedListForUser.unshift(genre);\n  } // console.log(genreSortedListForUser);\n  //import cities from json\n  // https://www.reddit.com/r/node/comments/2x066w/is_there_an_easy_synchronous_way_to_read_csv/\n\n\n  let genreCities = []; //let placesObj = JSON.parse(places);\n\n  let cities = places.items;\n\n  for (let i = 0; i < cities.length; i++) {\n    let specificCity = [];\n    specificCity.push(cities[i].city);\n    specificCity.push(cities[i].country);\n    specificCity.push(cities[i].genres);\n    genreCities.push(specificCity);\n  }\n\n  let cityMatches = []; // look through each city\n\n  for (let city = 0; city < genreCities.length; city++) {\n    let isCityAMatch = 0;\n\n    for (let userGenre = 0; userGenre < genreSortedListForUser.length; userGenre++) {\n      if (isCityAMatch > 5) {\n        cityMatches.push(city);\n        break;\n      } // start at 2 bc city, country, genre, ...)\n\n\n      for (let cityGenre = 2; cityGenre < genreCities[city][2].length; cityGenre++) {\n        if (genreCities[city][2][cityGenre] === genreSortedListForUser[userGenre]) {\n          isCityAMatch += 1;\n        }\n      }\n    }\n  } // time for least squares\n\n\n  let leastSquaresList = [];\n\n  for (let city = 0; city < cityMatches.length; city++) {\n    let matchedCityNumber = cityMatches[city];\n    let cityScore = 0;\n\n    for (let cityGenre = 2; cityGenre < genreCities[matchedCityNumber].length - 1; cityGenre++) {\n      let cityGenrePos = cityGenre - 2;\n\n      for (let userGenrePos = 0; userGenrePos < genreSortedListForUser.length; userGenrePos++) {\n        if (genreCities[matchedCityNumber][cityGenre] === genreSortedListForUser[userGenrePos]) {\n          let differenceSquared = Math.pow(cityGenrePos - userGenrePos, 2);\n          cityScore += differenceSquared;\n        }\n      }\n    }\n\n    let cityScoreObject = {\n      cityNumber: matchedCityNumber,\n      score: cityScore\n    };\n    leastSquaresList.push(cityScoreObject);\n  }\n\n  leastSquaresList.sort(function (a, b) {\n    return a.score - b.score;\n  });\n  let topCitiesList = [];\n  let matchingCountries = [];\n  let lowestCityNumber = 0;\n\n  if (leastSquaresList.length > 5) {\n    lowestCityNumber = leastSquaresList.length - 5;\n  }\n\n  for (let city = lowestCityNumber; city < leastSquaresList.length; city++) {\n    let matchedCityNumber = leastSquaresList[city][\"cityNumber\"];\n    topCitiesList.push(genreCities[matchedCityNumber][0]);\n    matchingCountries.push(genreCities[matchedCityNumber][1]);\n  } //prints in 5,4,3,2,1 order\n\n\n  let returnList = [];\n  returnList.push(topCitiesList);\n  returnList.push(matchingCountries);\n  return returnList;\n}; //let user = fs.readFileSync('./user.json');\n//let places = fs.readFileSync('./places.json');\n//findCities(user, places);\n\n\nmodule.exports.findCities = findCities;","map":{"version":3,"sources":["C:/Users/jasmi/where-do-you-vibe/client/src/compare-artists.js"],"names":["findCities","user","places","artists","items","genreObjForUser","Object","i","length","genreListForArtist","genres","posValue","genre","String","sortUserGenreObject","fromEntries","entries","sort","a","b","genreSortedListForUser","unshift","genreCities","cities","specificCity","push","city","country","cityMatches","isCityAMatch","userGenre","cityGenre","leastSquaresList","matchedCityNumber","cityScore","cityGenrePos","userGenrePos","differenceSquared","Math","pow","cityScoreObject","cityNumber","score","topCitiesList","matchingCountries","lowestCityNumber","returnList","module","exports"],"mappings":"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","sourcesContent":["//const fs = require('fs');\r\n\r\nvar findCities = function findCities(user, places) {\r\n\r\n  //let obj = JSON.parse(user);\r\n  let artists = user.items;\r\n\r\n  let genreObjForUser = Object();\r\n\r\n  for (let i = 0; i < artists.length; i++) {\r\n    let genreListForArtist = artists[i].genres;\r\n    let posValue = artists.length-i;\r\n    for(let i = 0; i < genreListForArtist.length; i++){\r\n      let genre = String(genreListForArtist[i]);\r\n      if(genreObjForUser[genre]){\r\n        genreObjForUser[genre] +=posValue;\r\n      }\r\n      else{\r\n        genreObjForUser[genre] = posValue;\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  // https://stackoverflow.com/questions/1069666/sorting-object-property-by-values/16794116#16794116\r\n  const sortUserGenreObject = Object.fromEntries(\r\n    Object.entries(genreObjForUser).sort(([,a],[,b]) => a-b)\r\n  );\r\n\r\n  let genreSortedListForUser = [];\r\n  for (let genre in sortUserGenreObject){\r\n    genreSortedListForUser.unshift(genre);\r\n  }\r\n  // console.log(genreSortedListForUser);\r\n\r\n  //import cities from json\r\n  // https://www.reddit.com/r/node/comments/2x066w/is_there_an_easy_synchronous_way_to_read_csv/\r\n  let genreCities = [];\r\n\r\n  //let placesObj = JSON.parse(places);\r\n  let cities = places.items;\r\n    \r\n  for (let i = 0; i < cities.length; i++) {\r\n    let specificCity = [];\r\n    specificCity.push(cities[i].city);\r\n    specificCity.push(cities[i].country);\r\n    specificCity.push(cities[i].genres);\r\n    genreCities.push(specificCity);\r\n  }\r\n\r\n  let cityMatches = [];\r\n  // look through each city\r\n  for(let city = 0; city < genreCities.length; city++) {\r\n    let isCityAMatch = 0;\r\n    for(let userGenre = 0; userGenre < genreSortedListForUser.length; userGenre++){\r\n      if(isCityAMatch > 5){\r\n        cityMatches.push(city);\r\n        break;\r\n      }\r\n      // start at 2 bc city, country, genre, ...)\r\n      for(let cityGenre = 2; cityGenre < genreCities[city][2].length; cityGenre++){\r\n        if(genreCities[city][2][cityGenre] === genreSortedListForUser[userGenre]){\r\n          isCityAMatch += 1;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // time for least squares\r\n  let leastSquaresList = [];\r\n  for(let city = 0; city < cityMatches.length; city++) {\r\n    let matchedCityNumber = cityMatches[city];\r\n    let cityScore = 0;\r\n\r\n    for(let cityGenre = 2; cityGenre < genreCities[matchedCityNumber].length-1; cityGenre++){\r\n      let cityGenrePos = cityGenre-2;\r\n      for(let userGenrePos = 0; userGenrePos < genreSortedListForUser.length; userGenrePos++){\r\n        if(genreCities[matchedCityNumber][cityGenre] === genreSortedListForUser[userGenrePos]){\r\n          let differenceSquared = Math.pow(cityGenrePos - userGenrePos,2);\r\n\r\n          cityScore += differenceSquared;\r\n        }\r\n      }\r\n    }\r\n    let cityScoreObject = {\r\n      cityNumber: matchedCityNumber,\r\n      score: cityScore\r\n    }\r\n    leastSquaresList.push(cityScoreObject)\r\n  }\r\n\r\n  leastSquaresList.sort(function(a, b){return a.score - b.score});\r\n\r\n  let topCitiesList = [];\r\n  let matchingCountries = [];\r\n\r\n  let lowestCityNumber = 0;\r\n  if(leastSquaresList.length > 5){\r\n    lowestCityNumber = leastSquaresList.length-5\r\n  }\r\n  for(let city = lowestCityNumber; city < leastSquaresList.length; city++) {\r\n    let matchedCityNumber = leastSquaresList[city][\"cityNumber\"];\r\n    topCitiesList.push(genreCities[matchedCityNumber][0]);\r\n    matchingCountries.push(genreCities[matchedCityNumber][1])\r\n  }\r\n//prints in 5,4,3,2,1 order\r\n\r\n  let returnList = [];\r\n  returnList.push(topCitiesList);\r\n  returnList.push(matchingCountries);\r\n\r\n  return returnList;\r\n}\r\n\r\n//let user = fs.readFileSync('./user.json');\r\n//let places = fs.readFileSync('./places.json');\r\n\r\n//findCities(user, places);\r\n\r\nmodule.exports.findCities = findCities;"]},"metadata":{},"sourceType":"module"}